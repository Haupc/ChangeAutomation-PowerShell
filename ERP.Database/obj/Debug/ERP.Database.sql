/*
    Target database:    ERP2
    Target instance:    PC
    Generated date:     7/13/2019 6:03:16 PM
    Generated on:       PC
    Package version:    (undefined)
    Migration version:  (n/a)
    Baseline version:   (n/a)
    SQL Change Automation version:  3.3.19190.9222
    Migrations pending: 13

    IMPORTANT! "SQLCMD Mode" must be activated prior to execution (under the Query menu in SSMS).

    BEFORE EXECUTING THIS SCRIPT, WE STRONGLY RECOMMEND YOU TAKE A BACKUP OF YOUR DATABASE.

    This SQLCMD script is designed to be executed through MSBuild (via the .sqlproj Deploy target) however
    it can also be run manually using SQL Management Studio.

    It was generated by the SQL Change Automation build task and contains logic to deploy the database, ensuring that
    each of the incremental migrations is executed a single time only in alphabetical (filename)
    order. If any errors occur within those scripts, the deployment will be aborted and the transaction
    rolled-back.

    NOTE: Automatic transaction management is provided for incremental migrations, so you don't need to
          add any special BEGIN TRAN/COMMIT/ROLLBACK logic in those script files.
          However if you require transaction handling in your Pre/Post-Deployment scripts, you will
          need to add this logic to the source .sql files yourself.
*/

----====================================================================================================================
---- SQLCMD Variables
:setvar DatabaseName "ERP2"
:setvar ReleaseVersion ""
:setvar ForceDeployWithoutBaseline "False"
:setvar DefaultFilePrefix "ERP2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultBackupPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\Backup\"
----====================================================================================================================

:on error exit -- Instructs SQLCMD to abort execution as soon as an erroneous batch is encountered

:setvar PackageVersion "(undefined)"
:setvar IsShadowDeployment 0

GO
:setvar IsSqlCmdEnabled "True"
GO


GO

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
SET XACT_ABORT ON; -- Abort the current batch immediately if a statement raises a run-time error and rollback any open transaction(s)

IF N'$(IsSqlCmdEnabled)' <> N'True' -- Is SQLCMD mode not enabled within the execution context (eg. SSMS)
    BEGIN
        IF IS_SRVROLEMEMBER(N'sysadmin') = 1
            BEGIN -- User is sysadmin; abort execution by disconnect the script from the database server
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Aborting connection to suppress subsequent errors.', 20, 127, N'UNKNOWN') WITH LOG;
            END
        ELSE
            BEGIN -- User is not sysadmin; abort execution by switching off statement execution (script will continue to the end without performing any actual deployment work)
                RAISERROR(N'This script must be run in SQLCMD Mode (under the Query menu in SSMS). Script execution has been halted.', 16, 127, N'UNKNOWN') WITH NOWAIT;
            END
    END
GO
IF @@ERROR != 0
    BEGIN
        SET NOEXEC ON; -- SQLCMD is NOT enabled so prevent any further statements from executing
    END
GO
-- Beyond this point, no further explicit error handling is required because it can be assumed that SQLCMD mode is enabled

IF SERVERPROPERTY('EngineEdition') = 5 AND DB_NAME() != N'$(DatabaseName)'
  RAISERROR(N'Azure SQL Database does not support switching between databases. Connect to [$(DatabaseName)] and then re-run the script.', 16, 127);

-- As this script has been generated for a specific server instance/database combination, stop execution if there is a mismatch
IF (@@SERVERNAME != 'PC' OR '$(DatabaseName)' != 'ERP2')
BEGIN
	RAISERROR(N'This script should only be executed on the following server/instance: [PC] (Database: [ERP2]). Halting deployment.', 16, 127, N'UNKNOWN') WITH NOWAIT;
	RETURN;
END
GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       PRE-DEPLOYMENT SCRIPTS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

PRINT '----- executing pre-deployment script "Pre-Deployment\01_Create_Database.sql" -----';
GO

------------------------- BEGIN PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ---------------------------
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	PRINT N'Creating $(DatabaseName)...';
END
GO
IF (DB_ID(N'$(DatabaseName)') IS NULL)
BEGIN
	CREATE DATABASE [$(DatabaseName)]; -- MODIFY THIS STATEMENT TO SPECIFY A COLLATION FOR YOUR DATABASE
END
 Print N'Pre---------------------
 0--------------------------------
 ------------------------------------------------
 -------------------------------------------------------'
GO
-------------------------- END PRE-DEPLOYMENT SCRIPT: "Pre-Deployment\01_Create_Database.sql" ----------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;









------------------------------------------------------------------------------------------------------------------------
------------------------------------------       INCREMENTAL MIGRATIONS       ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
PRINT '# Beginning transaction';

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;

SET XACT_ABORT ON;

BEGIN TRANSACTION;

GO
IF DB_NAME() != '$(DatabaseName)'
  RAISERROR ('Incorrect database context. Please check the connection details to ensure that the database matches the DatabaseName variable within this deployment script. Also ensure that your project scripts do not contain any "USE [OtherDbName]" statements. To force deployment, override the DatabaseName variable.', 16, 127);

GO
PRINT '# Setting up migration log table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLog]') AND [type] = 'U'))
  BEGIN
    IF OBJECT_ID(N'[dbo].[__MigrationLogCurrent]', 'V') IS NOT NULL
      DROP VIEW [dbo].[__MigrationLogCurrent];
    PRINT '# Creating a new migration log table';
    CREATE TABLE [dbo].[__MigrationLog] (
      [migration_id] UNIQUEIDENTIFIER NOT NULL,
      [script_checksum] NVARCHAR (64) NOT NULL,
      [script_filename] NVARCHAR (255) NOT NULL,
      [complete_dt] DATETIME2 NOT NULL,
      [applied_by] NVARCHAR (100) NOT NULL,
      [deployed] TINYINT CONSTRAINT [DF___MigrationLog_deployed] DEFAULT (1) NOT NULL,
      [version] VARCHAR (255) NULL,
      [package_version] VARCHAR (255) NULL,
      [release_version] VARCHAR (255) NULL,
      [sequence_no] INT IDENTITY (1, 1) NOT NULL CONSTRAINT [PK___MigrationLog] PRIMARY KEY CLUSTERED ([migration_id], [complete_dt], [script_checksum]));
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_CompleteDt]
      ON [dbo].[__MigrationLog]([complete_dt]);
    CREATE NONCLUSTERED INDEX [IX___MigrationLog_Version]
      ON [dbo].[__MigrationLog]([version]);
    CREATE UNIQUE NONCLUSTERED INDEX [UX___MigrationLog_SequenceNo]
      ON [dbo].[__MigrationLog]([sequence_no]);
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        PRINT N'Creating extended properties';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is required by SQL Change Automation projects to keep track of which migrations have been executed during deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', NULL, NULL;
        EXECUTE sp_addextendedproperty N'MS_Description', N'The executing user at the time of deployment (populated using the SYSTEM_USER function).', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'applied_by';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The date/time that the migration finished executing. This value is populated using the SYSDATETIME function.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'complete_dt';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This column contains a number of potential states:

0 - Marked As Deployed: The migration was not executed.
1- Deployed: The migration was executed successfully.
2- Imported: The migration was generated by importing from this DB.

"Marked As Deployed" and "Imported" are similar in that the migration was not executed on this database; it was was only marked as such to prevent it from executing during subsequent deployments.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'deployed';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The unique identifier of a migration script file. This value is stored within the <Migration /> Xml fragment within the header of the file itself.

Note that it is possible for this value to repeat in the [__MigrationLog] table. In the case of programmable object scripts, a record will be inserted with a particular ID each time a change is made to the source file and subsequently deployed.

In the case of a migration, you may see the same [migration_id] repeated, but only in the scenario where the "Mark As Deployed" button/command has been run.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'migration_id';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you have enabled SQLCMD Packaging in your SQL Change Automation project, or if you are using Octopus Deploy, this will be the version number that your database package was stamped with at build-time.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'package_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'If you are using Octopus Deploy, you can use the value in this column to look-up which release was responsible for deploying this migration.
If deploying via PowerShell, set the $ReleaseVersion variable to populate this column.
If deploying via Visual Studio, this column will always be NULL.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'release_version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'A SHA256 representation of the migration script file at the time of build.  This value is used to determine whether a migration has been changed since it was deployed. In the case of a programmable object script, a different checksum will cause the migration to be redeployed.
Note: if any variables have been specified as part of a deployment, this will not affect the checksum value.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_checksum';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The name of the migration script file on disk, at the time of build.
If Semantic Versioning has been enabled, then this value will contain the full relative path from the root of the project folder. If it is not enabled, then it will simply contain the filename itself.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'script_filename';
        EXECUTE sp_addextendedproperty N'MS_Description', N'An auto-seeded numeric identifier that can be used to determine the order in which migrations were deployed.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'sequence_no';
        EXECUTE sp_addextendedproperty N'MS_Description', N'The semantic version that this migration was created under. In SQL Change Automation projects, a folder can be given a version number, e.g. 1.0.0, and one or more migration scripts can be stored within that folder to provide logical grouping of related database changes.', 'SCHEMA', N'dbo', 'TABLE', N'__MigrationLog', 'COLUMN', N'version';
        EXECUTE sp_addextendedproperty N'MS_Description', N'This view is required by SQL Change Automation projects to determine whether a migration should be executed during a deployment. The view lists the most recent [__MigrationLog] entry for a given [migration_id], which is needed to determine whether a particular programmable object script needs to be (re)executed: a non-matching checksum on the current [__MigrationLog] entry will trigger the execution of a programmable object script. Please do not alter or remove this table from the database.', N'SCHEMA', N'dbo', N'VIEW', N'__MigrationLogCurrent', NULL, NULL;
      END
  END

IF NOT EXISTS (SELECT col.COLUMN_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS col WHERE col.CONSTRAINT_NAME = tab.CONSTRAINT_NAME AND col.TABLE_NAME = tab.TABLE_NAME AND col.TABLE_SCHEMA = tab.TABLE_SCHEMA AND tab.CONSTRAINT_TYPE = 'PRIMARY KEY' AND col.TABLE_SCHEMA = 'dbo' AND col.TABLE_NAME = '__MigrationLog' AND col.COLUMN_NAME = 'complete_dt')
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table has an incorrect primary key specification. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF COL_LENGTH(N'[dbo].[__MigrationLog]', N'sequence_no') IS NULL
  BEGIN
    RAISERROR (N'The SQL Change Automation [dbo].[__MigrationLog] table is missing the [sequence_no] column. This may be due to the fact that the <SqlChangeAutomationSchemaVersion/> element in your .sqlproj file contains the wrong version number for your database. Please check earlier versions of your .sqlproj file to determine what is the appropriate version for your database (possibly 1.7 or 1.3.1).', 16, 127, N'UNKNOWN')
      WITH NOWAIT;
    RETURN;
  END

IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__MigrationLogCurrent]') AND [type] = 'V'))
  BEGIN
    EXECUTE ('
	CREATE VIEW [dbo].[__MigrationLogCurrent]
			AS
			WITH currentMigration AS
			(
			  SELECT
				 migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed, ROW_NUMBER() OVER(PARTITION BY migration_id ORDER BY sequence_no DESC) AS RowNumber
			  FROM [dbo].[__MigrationLog]
			)
			SELECT  migration_id, script_checksum, script_filename, complete_dt, applied_by, deployed
			FROM currentMigration
			WHERE RowNumber = 1
	');
  END

GO
PRINT '# Setting up __SchemaSnapshot table';
IF (NOT EXISTS (SELECT * FROM sys.objects WHERE [object_id] = OBJECT_ID(N'[dbo].[__SchemaSnapshot]')))
  BEGIN
    CREATE TABLE [dbo].[__SchemaSnapshot] (
      [Snapshot] VARBINARY (MAX),
      [LastUpdateDate] DATETIME2 CONSTRAINT [__SchemaSnapshotDateDefault] DEFAULT SYSDATETIME());
    IF OBJECT_ID(N'sp_addextendedproperty', 'P') IS NOT NULL
      BEGIN
        EXECUTE sp_addextendedproperty N'MS_Description', N'This table is used by SQL Change Automation projects to store a snapshot of the schema at the time of the last deployment. Please do not alter or remove this table from the database.', 'SCHEMA', N'dbo', 'TABLE', N'__SchemaSnapshot', NULL, NULL;
      END
  END

GO
PRINT '# Truncating __SchemaSnapshot';
TRUNCATE TABLE [dbo].[__SchemaSnapshot];

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('37d01100-75dd-407d-801c-ed9ecdb40e67' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\001_20190702-1441_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\001_20190702-1441_PC.sql", ID: {37d01100-75dd-407d-801c-ed9ecdb40e67} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\001_20190702-1441_PC.sql" ----------------------------
GO
-- <Migration ID="37d01100-75dd-407d-801c-ed9ecdb40e67" />
GO

PRINT N'Creating schemas'
GO
CREATE SCHEMA [AP]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [APPS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [APPSYS]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [AR]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [HR]
AUTHORIZATION [dbo]
GO
CREATE SCHEMA [INV]
AUTHORIZATION [dbo]
GO
PRINT N'Creating [APPS].[SetOfBook]'
GO
CREATE TABLE [APPS].[SetOfBook]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [char] (2) NOT NULL,
[ShortCode] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_SetofBook] on [APPS].[SetOfBook]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SetofBook] ON [APPS].[SetOfBook] ([CX])
GO
PRINT N'Creating primary key [PK_SetofBook] on [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [PK_SetofBook] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [IX_Code_SetOfBook] UNIQUE NONCLUSTERED  ([Code], [BusinessGroupId])
GO
PRINT N'Creating [APPS].[AccountType]'
GO
CREATE TABLE [APPS].[AccountType]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bigint] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NULL
)
GO
PRINT N'Creating index [CX_AccountType] on [APPS].[AccountType]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_AccountType] ON [APPS].[AccountType] ([CX])
GO
PRINT N'Creating primary key [PK_AccountType] on [APPS].[AccountType]'
GO
ALTER TABLE [APPS].[AccountType] ADD CONSTRAINT [PK_AccountType] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Division]'
GO
CREATE TABLE [APPS].[Division]
(
[Id] [uniqueidentifier] NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nchar] (3) NOT NULL,
[ShortCode] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating index [CX_Division] on [APPS].[Division]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Division] ON [APPS].[Division] ([CX])
GO
PRINT N'Creating primary key [PK_Division] on [APPS].[Division]'
GO
ALTER TABLE [APPS].[Division] ADD CONSTRAINT [PK_Division] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[Division]'
GO
ALTER TABLE [APPS].[Division] ADD CONSTRAINT [IX_Code_Division] UNIQUE NONCLUSTERED  ([Code], [LegalEntityId])
GO
PRINT N'Creating [APPS].[AssetOrganization]'
GO
CREATE TABLE [APPS].[AssetOrganization]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nchar] (4) NOT NULL,
[ShortCode] [nvarchar] (10) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_AssetOrganization] on [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] ADD CONSTRAINT [PK_AssetOrganization] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] ADD CONSTRAINT [IX_Code_AssetOrganization] UNIQUE NONCLUSTERED  ([Code], [DivisionId])
GO
PRINT N'Creating [APPSYS].[User]'
GO
CREATE TABLE [APPSYS].[User]
(
[Id] [uniqueidentifier] NOT NULL,
[Username] [nvarchar] (50) NOT NULL,
[Password] [nvarchar] (50) NOT NULL,
[EmployeeId] [uniqueidentifier] NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[IsSysUser] [bit] NOT NULL,
[IsActive] [bit] NOT NULL,
[Salt] [nvarchar] (50) NULL
)
GO
PRINT N'Creating index [CX_User] on [APPSYS].[User]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_User] ON [APPSYS].[User] ([CX])
GO
PRINT N'Creating primary key [PK_User] on [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] ADD CONSTRAINT [PK_User] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[AuditLog]'
GO
CREATE TABLE [APPSYS].[AuditLog]
(
[Id] [uniqueidentifier] NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[ClassName] [nvarchar] (500) NOT NULL,
[MethodName] [nvarchar] (500) NOT NULL,
[OldData] [ntext] NULL,
[NewData] [ntext] NOT NULL,
[Time] [datetime] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_AuditLog] on [APPSYS].[AuditLog]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_AuditLog] ON [APPSYS].[AuditLog] ([CX])
GO
PRINT N'Creating primary key [PK_AuditLog] on [APPSYS].[AuditLog]'
GO
ALTER TABLE [APPSYS].[AuditLog] ADD CONSTRAINT [PK_AuditLog] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[BusinessGroup]'
GO
CREATE TABLE [APPS].[BusinessGroup]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [char] (2) NOT NULL,
[ShortCode] [nvarchar] (10) NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating index [CX_BusinessGroup] on [APPS].[BusinessGroup]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_BusinessGroup] ON [APPS].[BusinessGroup] ([CX])
GO
PRINT N'Creating primary key [PK_BusinessGroup] on [APPS].[BusinessGroup]'
GO
ALTER TABLE [APPS].[BusinessGroup] ADD CONSTRAINT [PK_BusinessGroup] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[BusinessGroup]'
GO
ALTER TABLE [APPS].[BusinessGroup] ADD CONSTRAINT [IX_Code_BusinessGroup] UNIQUE NONCLUSTERED  ([Code])
GO
PRINT N'Creating [APPS].[Bank]'
GO
CREATE TABLE [APPS].[Bank]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Bank] on [APPS].[Bank]'
GO
ALTER TABLE [APPS].[Bank] ADD CONSTRAINT [PK_Bank] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[ChartOfAccount]'
GO
CREATE TABLE [APPS].[ChartOfAccount]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[AccountCode] [nvarchar] (500) NOT NULL,
[AliasCode] [nvarchar] (500) NULL,
[AccountName] [nvarchar] (1000) NOT NULL,
[AccountDescription] [nvarchar] (2000) NULL,
[AccountType] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating index [CX_ChartOfAccount] on [APPS].[ChartOfAccount]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_ChartOfAccount] ON [APPS].[ChartOfAccount] ([CX])
GO
PRINT N'Creating primary key [PK_ChartOfAccount] on [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ADD CONSTRAINT [PK_ChartOfAccount] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[CustomerHeader]'
GO
CREATE TABLE [APPS].[CustomerHeader]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating index [CX_CustomerHeader] on [APPS].[CustomerHeader]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_CustomerHeader] ON [APPS].[CustomerHeader] ([CX])
GO
PRINT N'Creating primary key [PK_CustomerHeader] on [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] ADD CONSTRAINT [PK_CustomerHeader] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] ADD CONSTRAINT [IX_Name_CustomerHeader] UNIQUE NONCLUSTERED  ([Name])
GO
PRINT N'Creating [APPS].[HROrganization]'
GO
CREATE TABLE [APPS].[HROrganization]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nchar] (4) NOT NULL,
[ShortCode] [nvarchar] (10) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_Department] on [APPS].[HROrganization]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Department] ON [APPS].[HROrganization] ([CX])
GO
PRINT N'Creating primary key [PK_Department] on [APPS].[HROrganization]'
GO
ALTER TABLE [APPS].[HROrganization] ADD CONSTRAINT [PK_Department] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[HROrganization]'
GO
ALTER TABLE [APPS].[HROrganization] ADD CONSTRAINT [IX_Code_Department] UNIQUE NONCLUSTERED  ([Code], [DivisionId])
GO
PRINT N'Creating [APPS].[DescriptiveFledField]'
GO
CREATE TABLE [APPS].[DescriptiveFledField]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NULL,
[Name] [nvarchar] (50) NULL,
[Description] [nvarchar] (50) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_DescriptiveFledField] on [APPS].[DescriptiveFledField]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_DescriptiveFledField] ON [APPS].[DescriptiveFledField] ([CX])
GO
PRINT N'Creating primary key [PK_DescriptiveFledField] on [APPS].[DescriptiveFledField]'
GO
ALTER TABLE [APPS].[DescriptiveFledField] ADD CONSTRAINT [PK_DescriptiveFledField] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[LegalEntity]'
GO
CREATE TABLE [APPS].[LegalEntity]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [char] (2) NULL,
[ShortCode] [nchar] (10) NULL,
[Name] [nvarchar] (500) NULL
)
GO
PRINT N'Creating index [CX_LegalEntity] on [APPS].[LegalEntity]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_LegalEntity] ON [APPS].[LegalEntity] ([CX])
GO
PRINT N'Creating primary key [PK_LegalEntity] on [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] ADD CONSTRAINT [PK_LegalEntity] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] ADD CONSTRAINT [IX_Code_LegalEntity] UNIQUE NONCLUSTERED  ([Code], [SetOfBookId])
GO
PRINT N'Creating [HR].[Employee]'
GO
CREATE TABLE [HR].[Employee]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Code] [nvarchar] (50) NOT NULL,
[DisplayName] [nvarchar] (200) NULL,
[PrimaryEmail] [nvarchar] (500) NULL,
[AlternativeEmail] [nvarchar] (500) NULL,
[DepartmentId] [uniqueidentifier] NOT NULL,
[JobTitleId] [uniqueidentifier] NOT NULL,
[JobLevelId] [uniqueidentifier] NOT NULL,
[JoinDate] [date] NOT NULL,
[EffectiveDate] [date] NULL,
[EndDate] [date] NULL,
[Status] [int] NOT NULL
)
GO
PRINT N'Creating index [CX_Employee] on [HR].[Employee]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Employee] ON [HR].[Employee] ([CX])
GO
PRINT N'Creating primary key [PK_Employee] on [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [PK_Employee] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [HR].[JobLevel]'
GO
CREATE TABLE [HR].[JobLevel]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Level] [float] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_JobLevel] on [HR].[JobLevel]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobLevel] ON [HR].[JobLevel] ([CX])
GO
PRINT N'Creating primary key [PK_JobLevel] on [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] ADD CONSTRAINT [PK_JobLevel] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [HR].[JobTitle]'
GO
CREATE TABLE [HR].[JobTitle]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NULL,
[Name] [nvarchar] (500) NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_JobTitle] on [HR].[JobTitle]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobTitle] ON [HR].[JobTitle] ([CX])
GO
PRINT N'Creating primary key [PK_JobTitle] on [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] ADD CONSTRAINT [PK_JobTitle] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [HR].[EmployeeGroup]'
GO
CREATE TABLE [HR].[EmployeeGroup]
(
[EmployeeId] [uniqueidentifier] NOT NULL,
[GroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL
)
GO
PRINT N'Creating index [CX_UserGroup] on [HR].[EmployeeGroup]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_UserGroup] ON [HR].[EmployeeGroup] ([CX])
GO
PRINT N'Creating primary key [PK_UserGroup] on [HR].[EmployeeGroup]'
GO
ALTER TABLE [HR].[EmployeeGroup] ADD CONSTRAINT [PK_UserGroup] PRIMARY KEY NONCLUSTERED  ([EmployeeId], [GroupId])
GO
PRINT N'Creating [HR].[Group]'
GO
CREATE TABLE [HR].[Group]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[OrganizationId] [uniqueidentifier] NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating index [CX_Group] on [HR].[Group]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Group] ON [HR].[Group] ([CX])
GO
PRINT N'Creating primary key [PK_Group] on [HR].[Group]'
GO
ALTER TABLE [HR].[Group] ADD CONSTRAINT [PK_Group] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[FiscalCalendar]'
GO
CREATE TABLE [APPS].[FiscalCalendar]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Year] [int] NOT NULL,
[StartDate] [datetime] NOT NULL,
[EndDate] [datetime] NOT NULL
)
GO
PRINT N'Creating primary key [PK_FiscalCalendar] on [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] ADD CONSTRAINT [PK_FiscalCalendar] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Currency]'
GO
CREATE TABLE [APPS].[Currency]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (3) NULL,
[Name] [nvarchar] (500) NULL,
[IsMain] [bit] NOT NULL,
[Disable] [bit] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_FunctionalCurrency] on [APPS].[Currency]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_FunctionalCurrency] ON [APPS].[Currency] ([CX])
GO
PRINT N'Creating primary key [PK_FunctionalCurrency] on [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [PK_FunctionalCurrency] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating index [IX_Code_Currency] on [APPS].[Currency]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Code_Currency] ON [APPS].[Currency] ([Code])
GO
PRINT N'Creating [APPS].[InventoryOrganization]'
GO
CREATE TABLE [APPS].[InventoryOrganization]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nchar] (4) NOT NULL,
[ShortCode] [nvarchar] (10) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_InventoryOrganization] on [APPS].[InventoryOrganization]'
GO
ALTER TABLE [APPS].[InventoryOrganization] ADD CONSTRAINT [PK_InventoryOrganization] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[InventoryOrganization]'
GO
ALTER TABLE [APPS].[InventoryOrganization] ADD CONSTRAINT [IX_Code_InventoryOrganization] UNIQUE NONCLUSTERED  ([Code], [DivisionId])
GO
PRINT N'Creating [HR].[JobHistory]'
GO
CREATE TABLE [HR].[JobHistory]
(
[Id] [uniqueidentifier] NOT NULL,
[EmployeeId] [uniqueidentifier] NOT NULL,
[DepartmentId] [uniqueidentifier] NOT NULL,
[StartDate] [date] NOT NULL,
[EndDate] [date] NULL,
[Status] [nvarchar] (50) NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_JobHistory] on [HR].[JobHistory]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobHistory] ON [HR].[JobHistory] ([CX])
GO
PRINT N'Creating primary key [PK_JobHistory] on [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] ADD CONSTRAINT [PK_JobHistory] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[KeyFlexField]'
GO
CREATE TABLE [APPS].[KeyFlexField]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_KeyFlexField] on [APPS].[KeyFlexField]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_KeyFlexField] ON [APPS].[KeyFlexField] ([CX])
GO
PRINT N'Creating primary key [PK_KeyFlexField] on [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] ADD CONSTRAINT [PK_KeyFlexField] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[Notification]'
GO
CREATE TABLE [APPSYS].[Notification]
(
[Id] [uniqueidentifier] NOT NULL,
[Time] [datetime] NOT NULL,
[CX] [bigint] NOT NULL,
[Status] [int] NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[Content] [ntext] NOT NULL
)
GO
PRINT N'Creating index [CX_Notification] on [APPSYS].[Notification]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Notification] ON [APPSYS].[Notification] ([CX])
GO
PRINT N'Creating primary key [PK_Notification] on [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [PK_Notification] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[Feature]'
GO
CREATE TABLE [APPSYS].[Feature]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Name] [nvarchar] (500) NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_Feature] on [APPSYS].[Feature]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Feature] ON [APPSYS].[Feature] ([CX])
GO
PRINT N'Creating primary key [PK_Feature] on [APPSYS].[Feature]'
GO
ALTER TABLE [APPSYS].[Feature] ADD CONSTRAINT [PK_Feature] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[Operation]'
GO
CREATE TABLE [APPSYS].[Operation]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Name] [nvarchar] (2000) NOT NULL,
[FeatureId] [uniqueidentifier] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_Operation] on [APPSYS].[Operation]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Operation] ON [APPSYS].[Operation] ([CX])
GO
PRINT N'Creating primary key [PK_APPSYS.Operation] on [APPSYS].[Operation]'
GO
ALTER TABLE [APPSYS].[Operation] ADD CONSTRAINT [PK_APPSYS.Operation] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[PaymentMethod]'
GO
CREATE TABLE [APPS].[PaymentMethod]
(
[Id] [uniqueidentifier] NOT NULL,
[MethodName] [nvarchar] (50) NOT NULL,
[AccountName] [nvarchar] (50) NOT NULL,
[Sequence] [int] NOT NULL,
[CX] [bigint] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_PaymentMethod] on [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [PK_PaymentMethod] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[PaymentTerm]'
GO
CREATE TABLE [APPS].[PaymentTerm]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Day] [int] NOT NULL,
[Default] [bit] NOT NULL,
[Sequence] [int] NOT NULL,
[Disable] [bit] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_PaymentTerm] on [APPS].[PaymentTerm]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_PaymentTerm] ON [APPS].[PaymentTerm] ([CX])
GO
PRINT N'Creating primary key [PK_PaymentTerm] on [APPS].[PaymentTerm]'
GO
ALTER TABLE [APPS].[PaymentTerm] ADD CONSTRAINT [PK_PaymentTerm] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[ProjectOrganization]'
GO
CREATE TABLE [APPS].[ProjectOrganization]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nchar] (4) NOT NULL,
[ShortCode] [nvarchar] (10) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_ProjectOrganization] on [APPS].[ProjectOrganization]'
GO
ALTER TABLE [APPS].[ProjectOrganization] ADD CONSTRAINT [PK_ProjectOrganization] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[ProjectOrganization]'
GO
ALTER TABLE [APPS].[ProjectOrganization] ADD CONSTRAINT [IX_Code_ProjectOrganization] UNIQUE NONCLUSTERED  ([Code], [DivisionId])
GO
PRINT N'Creating [APPS].[SupplierHeader]'
GO
CREATE TABLE [APPS].[SupplierHeader]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (50) NOT NULL
)
GO
PRINT N'Creating index [CX_SupplierHeader] on [APPS].[SupplierHeader]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SupplierHeader] ON [APPS].[SupplierHeader] ([CX])
GO
PRINT N'Creating primary key [PK_SupplierHeader] on [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] ADD CONSTRAINT [PK_SupplierHeader] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Tax]'
GO
CREATE TABLE [APPS].[Tax]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[TaxCode] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NULL,
[Percent] [float] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Tax] on [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [PK_Tax] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[UnitOfMeasure]'
GO
CREATE TABLE [APPS].[UnitOfMeasure]
(
[Id] [uniqueidentifier] NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[AllowedPrecision] [int] NOT NULL,
[Type] [nvarchar] (50) NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[BusinessGroupId] [uniqueidentifier] NULL
)
GO
PRINT N'Creating primary key [PK_UOM] on [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] ADD CONSTRAINT [PK_UOM] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[UserProfile]'
GO
CREATE TABLE [APPSYS].[UserProfile]
(
[Id] [uniqueidentifier] NOT NULL,
[Key] [nvarchar] (200) NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Value] [ntext] NOT NULL
)
GO
PRINT N'Creating index [IX_UserProfile] on [APPSYS].[UserProfile]'
GO
CREATE UNIQUE CLUSTERED INDEX [IX_UserProfile] ON [APPSYS].[UserProfile] ([CX])
GO
PRINT N'Creating primary key [PK_UserProfile] on [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] ADD CONSTRAINT [PK_UserProfile] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPSYS].[SystemConfiguration]'
GO
CREATE TABLE [APPSYS].[SystemConfiguration]
(
[Key] [nvarchar] (50) NOT NULL,
[Value] [nvarchar] (2000) NOT NULL
)
GO
PRINT N'Creating primary key [PK_SystemConfiguration] on [APPSYS].[SystemConfiguration]'
GO
ALTER TABLE [APPSYS].[SystemConfiguration] ADD CONSTRAINT [PK_SystemConfiguration] PRIMARY KEY CLUSTERED  ([Key])
GO
PRINT N'Creating [APPS].[CostCenter]'
GO
CREATE TABLE [APPS].[CostCenter]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (500) NOT NULL,
[Name] [nvarchar] (500) NULL,
[ParentId] [uniqueidentifier] NOT NULL,
[Disable] [bit] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[ChartOfAccountId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CostCenter] on [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [PK_CostCenter] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[GoodItem]'
GO
CREATE TABLE [APPS].[GoodItem]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[InventoryOrganizationId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_GoodItem] on [APPS].[GoodItem]'
GO
ALTER TABLE [APPS].[GoodItem] ADD CONSTRAINT [PK_GoodItem] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [AP].[SupplierHeaderValue]'
GO
CREATE TABLE [AP].[SupplierHeaderValue]
(
[Id] [uniqueidentifier] NOT NULL,
[SupplierId] [uniqueidentifier] NOT NULL,
[SupplierHeaderId] [uniqueidentifier] NULL,
[Value] [nvarchar] (500) NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_SupplierHeaderValue] on [AP].[SupplierHeaderValue]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SupplierHeaderValue] ON [AP].[SupplierHeaderValue] ([CX])
GO
PRINT N'Creating primary key [PK_SupplierHeaderValue] on [AP].[SupplierHeaderValue]'
GO
ALTER TABLE [AP].[SupplierHeaderValue] ADD CONSTRAINT [PK_SupplierHeaderValue] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [AP].[SupplierSite]'
GO
CREATE TABLE [AP].[SupplierSite]
(
[Id] [uniqueidentifier] NOT NULL,
[SupplierId] [uniqueidentifier] NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_SupplierSite] on [AP].[SupplierSite]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SupplierSite] ON [AP].[SupplierSite] ([CX])
GO
PRINT N'Creating primary key [PK_SupplierSite] on [AP].[SupplierSite]'
GO
ALTER TABLE [AP].[SupplierSite] ADD CONSTRAINT [PK_SupplierSite] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [AP].[Supplier]'
GO
CREATE TABLE [AP].[Supplier]
(
[Id] [uniqueidentifier] NOT NULL,
[TaxCode] [nvarchar] (50) NULL,
[Name] [nvarchar] (500) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating primary key [PK_Supplier] on [AP].[Supplier]'
GO
ALTER TABLE [AP].[Supplier] ADD CONSTRAINT [PK_Supplier] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [AR].[CustomerSite]'
GO
CREATE TABLE [AR].[CustomerSite]
(
[Id] [uniqueidentifier] NOT NULL,
[CustomerId] [uniqueidentifier] NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_CustomerSite] on [AR].[CustomerSite]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_CustomerSite] ON [AR].[CustomerSite] ([CX])
GO
PRINT N'Creating primary key [PK_CustomerSite] on [AR].[CustomerSite]'
GO
ALTER TABLE [AR].[CustomerSite] ADD CONSTRAINT [PK_CustomerSite] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [AR].[Customer]'
GO
CREATE TABLE [AR].[Customer]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating primary key [PK_Customer] on [AR].[Customer]'
GO
ALTER TABLE [AR].[Customer] ADD CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [INV].[Bin]'
GO
CREATE TABLE [INV].[Bin]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[RackId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Bin] on [INV].[Bin]'
GO
ALTER TABLE [INV].[Bin] ADD CONSTRAINT [PK_Bin] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [INV].[Rack]'
GO
CREATE TABLE [INV].[Rack]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[RowId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Rack] on [INV].[Rack]'
GO
ALTER TABLE [INV].[Rack] ADD CONSTRAINT [PK_Rack] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [INV].[Row]'
GO
CREATE TABLE [INV].[Row]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[WarehouseId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Row] on [INV].[Row]'
GO
ALTER TABLE [INV].[Row] ADD CONSTRAINT [PK_Row] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [INV].[Warehouse]'
GO
CREATE TABLE [INV].[Warehouse]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[Location] [nvarchar] (500) NOT NULL,
[InventoryOrganizationId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Warehouse] on [INV].[Warehouse]'
GO
ALTER TABLE [INV].[Warehouse] ADD CONSTRAINT [PK_Warehouse] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[CustomerGroup]'
GO
CREATE TABLE [dbo].[CustomerGroup]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_CustomerGroup] on [dbo].[CustomerGroup]'
GO
ALTER TABLE [dbo].[CustomerGroup] ADD CONSTRAINT [PK_CustomerGroup] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[Stock]'
GO
CREATE TABLE [dbo].[Stock]
(
[Id] [uniqueidentifier] NOT NULL,
[GoodItemId] [uniqueidentifier] NOT NULL,
[WarehouseId] [uniqueidentifier] NOT NULL,
[Quantity] [decimal] (18, 4) NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Stock] on [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] ADD CONSTRAINT [PK_Stock] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[SupplierGroup]'
GO
CREATE TABLE [dbo].[SupplierGroup]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_SupplierGroup] on [dbo].[SupplierGroup]'
GO
ALTER TABLE [dbo].[SupplierGroup] ADD CONSTRAINT [PK_SupplierGroup] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[AuditLog]'
GO
ALTER TABLE [APPSYS].[AuditLog] ADD CONSTRAINT [FK_AuditLog_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[Operation]'
GO
ALTER TABLE [APPSYS].[Operation] ADD CONSTRAINT [FK_Operation_Feature] FOREIGN KEY ([FeatureId]) REFERENCES [APPSYS].[Feature] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [FK_Notification_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] ADD CONSTRAINT [FK_UserProfile_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] ADD CONSTRAINT [FK_User_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[AccountType]'
GO
ALTER TABLE [APPS].[AccountType] ADD CONSTRAINT [FK_AccountType_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] ADD CONSTRAINT [FK_AssetOrganization_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Bank]'
GO
ALTER TABLE [APPS].[Bank] ADD CONSTRAINT [FK_Bank_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] ADD CONSTRAINT [FK_CustomerHeader_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[DescriptiveFledField]'
GO
ALTER TABLE [APPS].[DescriptiveFledField] ADD CONSTRAINT [FK_DescriptiveFledField_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] ADD CONSTRAINT [FK_JobLevel_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] ADD CONSTRAINT [FK_JobTitle_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] ADD CONSTRAINT [FK_KeyFlexField_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [FK_SetofBook_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] ADD CONSTRAINT [FK_SupplierHeader_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] ADD CONSTRAINT [FK_UnitOfMeasure_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ADD CONSTRAINT [FK_ChartOfAccount_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [FK_FunctionalCurrency_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[HROrganization]'
GO
ALTER TABLE [APPS].[HROrganization] ADD CONSTRAINT [FK_Department_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[InventoryOrganization]'
GO
ALTER TABLE [APPS].[InventoryOrganization] ADD CONSTRAINT [FK_InventoryOrganization_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[ProjectOrganization]'
GO
ALTER TABLE [APPS].[ProjectOrganization] ADD CONSTRAINT [FK_ProjectOrganization_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Division]'
GO
ALTER TABLE [APPS].[Division] ADD CONSTRAINT [FK_Division_LegalEntity] FOREIGN KEY ([LegalEntityId]) REFERENCES [APPS].[LegalEntity] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] ADD CONSTRAINT [FK_FiscalCalendar_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_Department] FOREIGN KEY ([DepartmentId]) REFERENCES [APPS].[HROrganization] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobTitle] FOREIGN KEY ([JobTitleId]) REFERENCES [HR].[JobTitle] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobLevel] FOREIGN KEY ([JobLevelId]) REFERENCES [HR].[JobLevel] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] ADD CONSTRAINT [FK_JobHistory_Department] FOREIGN KEY ([DepartmentId]) REFERENCES [APPS].[HROrganization] ([Id])
GO
ALTER TABLE [HR].[JobHistory] ADD CONSTRAINT [FK_JobHistory_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] ADD CONSTRAINT [FK_LegalEntity_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [FK_PaymentMethod_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[PaymentTerm]'
GO
ALTER TABLE [APPS].[PaymentTerm] ADD CONSTRAINT [FK_PaymentTerm_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [FK_Tax_SetofBook1] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[EmployeeGroup]'
GO
ALTER TABLE [HR].[EmployeeGroup] ADD CONSTRAINT [FK_EmployeeGroup_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO
ALTER TABLE [HR].[EmployeeGroup] ADD CONSTRAINT [FK_EmployeeGroup_Group] FOREIGN KEY ([GroupId]) REFERENCES [HR].[Group] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\001_20190702-1441_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\001_20190702-1441_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('37d01100-75dd-407d-801c-ed9ecdb40e67' AS UNIQUEIDENTIFIER), '48E2FBED3EA468F9E24150E0A03F1506AB6990CF5808DCA3ABA624EFA051E2AA', 'Migrations\001_20190702-1441_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\001_20190702-1441_PC.sql", ID: {37d01100-75dd-407d-801c-ed9ecdb40e67} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('eefcf28f-5a84-42bc-b73e-dd39cb41cb59' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\002_20190702-1524_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\002_20190702-1524_PC.sql", ID: {eefcf28f-5a84-42bc-b73e-dd39cb41cb59} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\002_20190702-1524_PC.sql" ----------------------------
GO
-- <Migration ID="eefcf28f-5a84-42bc-b73e-dd39cb41cb59" />
GO

PRINT N'Dropping foreign keys from [APPS].[AccountType]'
GO
ALTER TABLE [APPS].[AccountType] DROP CONSTRAINT [FK_AccountType_SetofBook]
GO
PRINT N'Dropping constraints from [APPS].[AccountType]'
GO
ALTER TABLE [APPS].[AccountType] DROP CONSTRAINT [PK_AccountType]
GO
PRINT N'Dropping constraints from [APPS].[Bank]'
GO
ALTER TABLE [APPS].[Bank] DROP CONSTRAINT [PK_Bank]
GO
PRINT N'Dropping constraints from [AP].[Supplier]'
GO
ALTER TABLE [AP].[Supplier] DROP CONSTRAINT [PK_Supplier]
GO
PRINT N'Dropping index [CX_AccountType] from [APPS].[AccountType]'
GO
DROP INDEX [CX_AccountType] ON [APPS].[AccountType]
GO
PRINT N'Dropping [APPS].[AccountType]'
GO
DROP TABLE [APPS].[AccountType]
GO
PRINT N'Creating [APPS].[BankAccount]'
GO
CREATE TABLE [APPS].[BankAccount]
(
[Id] [uniqueidentifier] NOT NULL,
[BankId] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_BankAccount] on [APPS].[BankAccount]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_BankAccount] ON [APPS].[BankAccount] ([CX])
GO
PRINT N'Creating primary key [PK_BankAccount] on [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [PK_BankAccount] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating index [CX_Bank] on [APPS].[Bank]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Bank] ON [APPS].[Bank] ([CX])
GO
PRINT N'Creating index [CX_Supplier] on [AP].[Supplier]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Supplier] ON [AP].[Supplier] ([CX])
GO
PRINT N'Creating primary key [PK_Bank] on [APPS].[Bank]'
GO
ALTER TABLE [APPS].[Bank] ADD CONSTRAINT [PK_Bank] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating primary key [PK_Supplier] on [AP].[Supplier]'
GO
ALTER TABLE [AP].[Supplier] ADD CONSTRAINT [PK_Supplier] PRIMARY KEY NONCLUSTERED  ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\002_20190702-1524_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\002_20190702-1524_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('eefcf28f-5a84-42bc-b73e-dd39cb41cb59' AS UNIQUEIDENTIFIER), '213AFF0EC04D062B6F6DA04C8D214A8020B6474668F6FFEFA1C71B290DF46516', 'Migrations\002_20190702-1524_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\002_20190702-1524_PC.sql", ID: {eefcf28f-5a84-42bc-b73e-dd39cb41cb59} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a2ab3973-7c4e-4681-8a86-a803cffdf83e' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\003_20190702-1639_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\003_20190702-1639_PC.sql", ID: {a2ab3973-7c4e-4681-8a86-a803cffdf83e} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\003_20190702-1639_PC.sql" ----------------------------
GO
-- <Migration ID="a2ab3973-7c4e-4681-8a86-a803cffdf83e" />
GO

PRINT N'Dropping constraints from [INV].[Bin]'
GO
ALTER TABLE [INV].[Bin] DROP CONSTRAINT [PK_Bin]
GO
PRINT N'Dropping constraints from [INV].[Rack]'
GO
ALTER TABLE [INV].[Rack] DROP CONSTRAINT [PK_Rack]
GO
PRINT N'Dropping constraints from [INV].[Row]'
GO
ALTER TABLE [INV].[Row] DROP CONSTRAINT [PK_Row]
GO
PRINT N'Dropping [INV].[Row]'
GO
DROP TABLE [INV].[Row]
GO
PRINT N'Dropping [INV].[Rack]'
GO
DROP TABLE [INV].[Rack]
GO
PRINT N'Dropping [INV].[Bin]'
GO
DROP TABLE [INV].[Bin]
GO
PRINT N'Creating [INV].[BinLocation]'
GO
CREATE TABLE [INV].[BinLocation]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[Row] [nvarchar] (500) NOT NULL,
[Rack] [nvarchar] (500) NULL,
[Bin] [nvarchar] (500) NULL,
[WarehouseId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_Bin] on [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] ADD CONSTRAINT [PK_Bin] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] ADD CONSTRAINT [FK_BinLocation_Warehouse] FOREIGN KEY ([WarehouseId]) REFERENCES [INV].[Warehouse] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\003_20190702-1639_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\003_20190702-1639_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a2ab3973-7c4e-4681-8a86-a803cffdf83e' AS UNIQUEIDENTIFIER), 'FD9F4C9FBB685BAEFABA6DF37618037806DF7203457FA3D3FA698775DEBE09A1', 'Migrations\003_20190702-1639_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\003_20190702-1639_PC.sql", ID: {a2ab3973-7c4e-4681-8a86-a803cffdf83e} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('000131e1-16c7-410c-a7d7-0e10598cb302' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\004_20190703-1406_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\004_20190703-1406_PC.sql", ID: {000131e1-16c7-410c-a7d7-0e10598cb302} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\004_20190703-1406_PC.sql" ----------------------------
GO
-- <Migration ID="000131e1-16c7-410c-a7d7-0e10598cb302" />
GO

PRINT N'Dropping foreign keys from [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] DROP CONSTRAINT [FK_FunctionalCurrency_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[DescriptiveFledField]'
GO
ALTER TABLE [APPS].[DescriptiveFledField] DROP CONSTRAINT [FK_DescriptiveFledField_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] DROP CONSTRAINT [FK_PaymentMethod_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] DROP CONSTRAINT [FK_SetofBook_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] DROP CONSTRAINT [FK_ChartOfAccount_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] DROP CONSTRAINT [FK_FiscalCalendar_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] DROP CONSTRAINT [FK_LegalEntity_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[PaymentTerm]'
GO
ALTER TABLE [APPS].[PaymentTerm] DROP CONSTRAINT [FK_PaymentTerm_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] DROP CONSTRAINT [FK_Tax_SetofBook1]
GO
PRINT N'Dropping foreign keys from [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] DROP CONSTRAINT [FK_UnitOfMeasure_BusinessGroup]
GO
PRINT N'Dropping constraints from [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] DROP CONSTRAINT [PK_BankAccount]
GO
PRINT N'Dropping constraints from [APPS].[DescriptiveFledField]'
GO
ALTER TABLE [APPS].[DescriptiveFledField] DROP CONSTRAINT [PK_DescriptiveFledField]
GO
PRINT N'Dropping constraints from [APPS].[GoodItem]'
GO
ALTER TABLE [APPS].[GoodItem] DROP CONSTRAINT [PK_GoodItem]
GO
PRINT N'Dropping constraints from [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] DROP CONSTRAINT [PK_PaymentMethod]
GO
PRINT N'Dropping constraints from [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] DROP CONSTRAINT [PK_SetofBook]
GO
PRINT N'Dropping constraints from [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] DROP CONSTRAINT [IX_Code_SetOfBook]
GO
PRINT N'Dropping constraints from [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] DROP CONSTRAINT [PK_UOM]
GO
PRINT N'Dropping index [CX_BankAccount] from [APPS].[BankAccount]'
GO
DROP INDEX [CX_BankAccount] ON [APPS].[BankAccount]
GO
PRINT N'Dropping index [CX_DescriptiveFledField] from [APPS].[DescriptiveFledField]'
GO
DROP INDEX [CX_DescriptiveFledField] ON [APPS].[DescriptiveFledField]
GO
PRINT N'Dropping index [CX_SetofBook] from [APPS].[SetOfBook]'
GO
DROP INDEX [CX_SetofBook] ON [APPS].[SetOfBook]
GO
PRINT N'Dropping [APPS].[GoodItem]'
GO
DROP TABLE [APPS].[GoodItem]
GO
PRINT N'Dropping [APPS].[DescriptiveFledField]'
GO
DROP TABLE [APPS].[DescriptiveFledField]
GO
PRINT N'Rebuilding [APPS].[BankAccount]'
GO
CREATE TABLE [APPS].[RG_Recovery_1_BankAccount]
(
[Id] [uniqueidentifier] NOT NULL,
[BankId] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[No] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NULL
)
GO
INSERT INTO [APPS].[RG_Recovery_1_BankAccount]([Id], [BankId], [SetOfBookId], [CX], [Disable]) SELECT [Id], [BankId], [SetOfBookId], [CX], [Disable] FROM [APPS].[BankAccount]
GO
DROP TABLE [APPS].[BankAccount]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_1_BankAccount]', N'BankAccount', N'OBJECT'
GO
PRINT N'Creating index [CX_BankAccount] on [APPS].[BankAccount]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_BankAccount] ON [APPS].[BankAccount] ([CX])
GO
PRINT N'Creating primary key [PK_BankAccount] on [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [PK_BankAccount] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[SetOfBook]'
GO
CREATE TABLE [APPS].[RG_Recovery_2_SetOfBook]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [char] (2) NOT NULL,
[ShortCode] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CurrencyId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_2_SetOfBook] ON
GO
INSERT INTO [APPS].[RG_Recovery_2_SetOfBook]([Id], [Code], [ShortCode], [Name], [BusinessGroupId], [CX]) SELECT [Id], [Code], [ShortCode], [Name], [BusinessGroupId], [CX] FROM [APPS].[SetOfBook]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_2_SetOfBook] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[SetOfBook]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_2_SetOfBook]', RESEED, @idVal)
GO
DROP TABLE [APPS].[SetOfBook]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_2_SetOfBook]', N'SetOfBook', N'OBJECT'
GO
PRINT N'Creating index [CX_SetofBook] on [APPS].[SetOfBook]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SetofBook] ON [APPS].[SetOfBook] ([CX])
GO
PRINT N'Creating primary key [PK_SetofBook] on [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [PK_SetofBook] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [IX_Code_SetOfBook] UNIQUE NONCLUSTERED  ([Code], [BusinessGroupId])
GO
PRINT N'Altering [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] DROP
COLUMN [AccountType]
GO
PRINT N'Altering [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] DROP
COLUMN [IsMain]
GO
EXEC sp_rename N'[APPS].[Currency].[SetOfBookId]', N'BusinessGroupId', N'COLUMN'
GO
PRINT N'Creating [APPS].[DescriptiveFlexField]'
GO
CREATE TABLE [APPS].[DescriptiveFlexField]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NULL,
[Name] [nvarchar] (50) NULL,
[Description] [nvarchar] (50) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_DescriptiveFledField] on [APPS].[DescriptiveFlexField]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_DescriptiveFledField] ON [APPS].[DescriptiveFlexField] ([CX])
GO
PRINT N'Creating primary key [PK_DescriptiveFledField] on [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] ADD CONSTRAINT [PK_DescriptiveFledField] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Item]'
GO
CREATE TABLE [APPS].[Item]
(
[Id] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating primary key [PK_GoodItem] on [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] ADD CONSTRAINT [PK_GoodItem] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[PaymentMethod]'
GO
CREATE TABLE [APPS].[RG_Recovery_3_PaymentMethod]
(
[Id] [uniqueidentifier] NOT NULL,
[MethodName] [nvarchar] (50) NOT NULL,
[AccountName] [nvarchar] (50) NOT NULL,
[Sequence] [int] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
INSERT INTO [APPS].[RG_Recovery_3_PaymentMethod]([Id], [MethodName], [AccountName], [Sequence], [SetOfBookId], [CX]) SELECT [Id], [MethodName], [AccountName], [Sequence], [SetOfBookId], [CX] FROM [APPS].[PaymentMethod]
GO
DROP TABLE [APPS].[PaymentMethod]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_3_PaymentMethod]', N'PaymentMethod', N'OBJECT'
GO
PRINT N'Creating primary key [PK_PaymentMethod] on [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [PK_PaymentMethod] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Altering [APPS].[PaymentTerm]'
GO
ALTER TABLE [APPS].[PaymentTerm] DROP
COLUMN [Default]
GO
PRINT N'Rebuilding [APPS].[UnitOfMeasure]'
GO
CREATE TABLE [APPS].[RG_Recovery_4_UnitOfMeasure]
(
[Id] [uniqueidentifier] NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[AllowedPrecision] [int] NOT NULL,
[Type] [nvarchar] (50) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_4_UnitOfMeasure] ON
GO
INSERT INTO [APPS].[RG_Recovery_4_UnitOfMeasure]([Id], [Name], [AllowedPrecision], [Type], [BusinessGroupId], [CX]) SELECT [Id], [Name], [AllowedPrecision], [Type], [BusinessGroupId], [CX] FROM [APPS].[UnitOfMeasure]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_4_UnitOfMeasure] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[UnitOfMeasure]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_4_UnitOfMeasure]', RESEED, @idVal)
GO
DROP TABLE [APPS].[UnitOfMeasure]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_4_UnitOfMeasure]', N'UnitOfMeasure', N'OBJECT'
GO
PRINT N'Creating primary key [PK_UOM] on [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] ADD CONSTRAINT [PK_UOM] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [FK_BankAccount_Bank] FOREIGN KEY ([BankId]) REFERENCES [APPS].[Bank] ([Id])
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [FK_BankAccount_SetOfBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [FK_CostCenter_ChartOfAccount] FOREIGN KEY ([ChartOfAccountId]) REFERENCES [APPS].[ChartOfAccount] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [FK_Currency_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] ADD CONSTRAINT [FK_DescriptiveFledField_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] ADD CONSTRAINT [FK_Item_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [FK_PaymentMethod_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [FK_SetofBook_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [FK_SetOfBook_Currency] FOREIGN KEY ([CurrencyId]) REFERENCES [APPS].[Currency] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ADD CONSTRAINT [FK_ChartOfAccount_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[PaymentTerm]'
GO
ALTER TABLE [APPS].[PaymentTerm] ADD CONSTRAINT [FK_PaymentTerm_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] ADD CONSTRAINT [FK_UnitOfMeasure_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] ADD CONSTRAINT [FK_FiscalCalendar_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] ADD CONSTRAINT [FK_LegalEntity_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [FK_Tax_SetofBook1] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\004_20190703-1406_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\004_20190703-1406_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('000131e1-16c7-410c-a7d7-0e10598cb302' AS UNIQUEIDENTIFIER), '05B08847C76C681B426BBF99CB544E3FF112F9A5AFF4AEA7BCB365ECE7C2FA29', 'Migrations\004_20190703-1406_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\004_20190703-1406_PC.sql", ID: {000131e1-16c7-410c-a7d7-0e10598cb302} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('211d82d3-3e2e-4318-8860-eb1bd3fa5143' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\005_20190703-1732_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\005_20190703-1732_PC.sql", ID: {211d82d3-3e2e-4318-8860-eb1bd3fa5143} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\005_20190703-1732_PC.sql" ----------------------------
GO
-- <Migration ID="211d82d3-3e2e-4318-8860-eb1bd3fa5143" />
GO

PRINT N'Altering [APPS].[Division]'
GO
EXEC sp_rename N'[APPS].[Division].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[AssetOrganization]'
GO
EXEC sp_rename N'[APPS].[AssetOrganization].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[BusinessGroup]'
GO
EXEC sp_rename N'[APPS].[BusinessGroup].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[SetOfBook]'
GO
EXEC sp_rename N'[APPS].[SetOfBook].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[HROrganization]'
GO
EXEC sp_rename N'[APPS].[HROrganization].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[LegalEntity]'
GO
EXEC sp_rename N'[APPS].[LegalEntity].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[InventoryOrganization]'
GO
EXEC sp_rename N'[APPS].[InventoryOrganization].[ShortCode]', N'ShortName', N'COLUMN'
GO
PRINT N'Altering [APPS].[ProjectOrganization]'
GO
EXEC sp_rename N'[APPS].[ProjectOrganization].[ShortCode]', N'ShortName', N'COLUMN'
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\005_20190703-1732_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\005_20190703-1732_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('211d82d3-3e2e-4318-8860-eb1bd3fa5143' AS UNIQUEIDENTIFIER), '42F3860849B85B0F625CA6A1D6457865E0D8B119DCF4CFCCA19EF5E22B77C7F4', 'Migrations\005_20190703-1732_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\005_20190703-1732_PC.sql", ID: {211d82d3-3e2e-4318-8860-eb1bd3fa5143} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f72418af-4d73-4e1f-b785-fde3072be56b' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\006_20190704-1500_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\006_20190704-1500_PC.sql", ID: {f72418af-4d73-4e1f-b785-fde3072be56b} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\006_20190704-1500_PC.sql" ----------------------------
GO
-- <Migration ID="f72418af-4d73-4e1f-b785-fde3072be56b" />
GO
PRINT N'Dropping foreign keys from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_Department]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobLevel]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobTitle]
GO
PRINT N'Dropping foreign keys from [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] DROP CONSTRAINT [FK_JobHistory_Department]
GO
PRINT N'Dropping foreign keys from [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] DROP CONSTRAINT [FK_JobLevel_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] DROP CONSTRAINT [FK_JobTitle_BusinessGroup]
GO
PRINT N'Dropping constraints from [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] DROP CONSTRAINT [PK_JobLevel]
GO
PRINT N'Dropping constraints from [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] DROP CONSTRAINT [PK_JobTitle]
GO
PRINT N'Dropping index [CX_JobLevel] from [HR].[JobLevel]'
GO
DROP INDEX [CX_JobLevel] ON [HR].[JobLevel]
GO
PRINT N'Dropping index [CX_JobTitle] from [HR].[JobTitle]'
GO
DROP INDEX [CX_JobTitle] ON [HR].[JobTitle]
GO
PRINT N'Altering [HR].[Employee]'
GO
EXEC sp_rename N'[HR].[Employee].[DepartmentId]', N'BusinessGroupId', N'COLUMN'
GO
PRINT N'Rebuilding [HR].[JobLevel]'
GO
CREATE TABLE [HR].[RG_Recovery_1_JobLevel]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Level] [float] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_1_JobLevel] ON
GO
INSERT INTO [HR].[RG_Recovery_1_JobLevel]([Id], [BusinessGroupId], [Level], [CX]) SELECT [Id], [BusinessGroupId], [Level], [CX] FROM [HR].[JobLevel]
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_1_JobLevel] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[HR].[JobLevel]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[HR].[RG_Recovery_1_JobLevel]', RESEED, @idVal)
GO
DROP TABLE [HR].[JobLevel]
GO
EXEC sp_rename N'[HR].[RG_Recovery_1_JobLevel]', N'JobLevel', N'OBJECT'
GO
PRINT N'Creating index [CX_JobLevel] on [HR].[JobLevel]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobLevel] ON [HR].[JobLevel] ([CX])
GO
PRINT N'Creating primary key [PK_JobLevel] on [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] ADD CONSTRAINT [PK_JobLevel] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [HR].[JobTitle]'
GO
CREATE TABLE [HR].[RG_Recovery_2_JobTitle]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NULL,
[Name] [nvarchar] (500) NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_2_JobTitle] ON
GO
INSERT INTO [HR].[RG_Recovery_2_JobTitle]([Id], [BusinessGroupId], [Code], [Name], [CX]) SELECT [Id], [BusinessGroupId], [Code], [Name], [CX] FROM [HR].[JobTitle]
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_2_JobTitle] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[HR].[JobTitle]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[HR].[RG_Recovery_2_JobTitle]', RESEED, @idVal)
GO
DROP TABLE [HR].[JobTitle]
GO
EXEC sp_rename N'[HR].[RG_Recovery_2_JobTitle]', N'JobTitle', N'OBJECT'
GO
PRINT N'Creating index [CX_JobTitle] on [HR].[JobTitle]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobTitle] ON [HR].[JobTitle] ([CX])
GO
PRINT N'Creating primary key [PK_JobTitle] on [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] ADD CONSTRAINT [PK_JobTitle] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Altering [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] DROP
COLUMN [DepartmentId]
GO
PRINT N'Adding foreign keys to [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_Department] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[HROrganization] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobLevel] FOREIGN KEY ([JobLevelId]) REFERENCES [HR].[JobLevel] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobTitle] FOREIGN KEY ([JobTitleId]) REFERENCES [HR].[JobTitle] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] ADD CONSTRAINT [FK_JobLevel_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] ADD CONSTRAINT [FK_JobTitle_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\006_20190704-1500_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\006_20190704-1500_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f72418af-4d73-4e1f-b785-fde3072be56b' AS UNIQUEIDENTIFIER), 'BD08E1041CA72568061D4534D362A334AA864FE936B71F5B533118ADA61D59A8', 'Migrations\006_20190704-1500_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\006_20190704-1500_PC.sql", ID: {f72418af-4d73-4e1f-b785-fde3072be56b} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('a377a10f-c2d9-480d-8a2d-5778d88fe381' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\007_20190704-1621_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\007_20190704-1621_PC.sql", ID: {a377a10f-c2d9-480d-8a2d-5778d88fe381} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\007_20190704-1621_PC.sql" ----------------------------
GO
-- <Migration ID="a377a10f-c2d9-480d-8a2d-5778d88fe381" />
GO

PRINT N'Dropping foreign keys from [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] DROP CONSTRAINT [FK_Notification_User]
GO
PRINT N'Dropping foreign keys from [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] DROP CONSTRAINT [FK_UserProfile_User]
GO
PRINT N'Dropping foreign keys from [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] DROP CONSTRAINT [FK_BankAccount_Bank]
GO
ALTER TABLE [APPS].[BankAccount] DROP CONSTRAINT [FK_BankAccount_SetOfBook]
GO
PRINT N'Dropping foreign keys from [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] DROP CONSTRAINT [FK_Currency_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] DROP CONSTRAINT [FK_SetOfBook_Currency]
GO
PRINT N'Dropping foreign keys from [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] DROP CONSTRAINT [FK_Item_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] DROP CONSTRAINT [FK_PaymentMethod_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] DROP CONSTRAINT [FK_SupplierHeader_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] DROP CONSTRAINT [FK_Tax_SetofBook1]
GO
PRINT N'Dropping foreign keys from [HR].[EmployeeGroup]'
GO
ALTER TABLE [HR].[EmployeeGroup] DROP CONSTRAINT [FK_EmployeeGroup_Employee]
GO
ALTER TABLE [HR].[EmployeeGroup] DROP CONSTRAINT [FK_EmployeeGroup_Group]
GO
PRINT N'Dropping foreign keys from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_BusinessGroup]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_Department]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobLevel]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobTitle]
GO
PRINT N'Dropping foreign keys from [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] DROP CONSTRAINT [FK_JobHistory_Employee]
GO
PRINT N'Dropping foreign keys from [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] DROP CONSTRAINT [FK_User_Employee]
GO
PRINT N'Dropping foreign keys from [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] DROP CONSTRAINT [FK_BinLocation_Warehouse]
GO
PRINT N'Dropping foreign keys from [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] DROP CONSTRAINT [FK_AssetOrganization_Division]
GO
PRINT N'Dropping constraints from [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] DROP CONSTRAINT [PK_Notification]
GO
PRINT N'Dropping constraints from [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] DROP CONSTRAINT [PK_UserProfile]
GO
PRINT N'Dropping constraints from [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] DROP CONSTRAINT [IX_Code_AssetOrganization]
GO
PRINT N'Dropping constraints from [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] DROP CONSTRAINT [PK_BankAccount]
GO
PRINT N'Dropping constraints from [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] DROP CONSTRAINT [PK_CostCenter]
GO
PRINT N'Dropping constraints from [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] DROP CONSTRAINT [PK_FunctionalCurrency]
GO
PRINT N'Dropping constraints from [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] DROP CONSTRAINT [PK_FiscalCalendar]
GO
PRINT N'Dropping constraints from [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] DROP CONSTRAINT [PK_GoodItem]
GO
PRINT N'Dropping constraints from [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] DROP CONSTRAINT [PK_PaymentMethod]
GO
PRINT N'Dropping constraints from [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] DROP CONSTRAINT [PK_SupplierHeader]
GO
PRINT N'Dropping constraints from [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] DROP CONSTRAINT [PK_Tax]
GO
PRINT N'Dropping constraints from [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] DROP CONSTRAINT [PK_UOM]
GO
PRINT N'Dropping constraints from [AR].[Customer]'
GO
ALTER TABLE [AR].[Customer] DROP CONSTRAINT [PK_Customer]
GO
PRINT N'Dropping constraints from [HR].[EmployeeGroup]'
GO
ALTER TABLE [HR].[EmployeeGroup] DROP CONSTRAINT [PK_UserGroup]
GO
PRINT N'Dropping constraints from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [PK_Employee]
GO
PRINT N'Dropping constraints from [HR].[Group]'
GO
ALTER TABLE [HR].[Group] DROP CONSTRAINT [PK_Group]
GO
PRINT N'Dropping constraints from [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] DROP CONSTRAINT [PK_Bin]
GO
PRINT N'Dropping constraints from [INV].[Warehouse]'
GO
ALTER TABLE [INV].[Warehouse] DROP CONSTRAINT [PK_Warehouse]
GO
PRINT N'Dropping constraints from [dbo].[CustomerGroup]'
GO
ALTER TABLE [dbo].[CustomerGroup] DROP CONSTRAINT [PK_CustomerGroup]
GO
PRINT N'Dropping constraints from [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] DROP CONSTRAINT [PK_Stock]
GO
PRINT N'Dropping constraints from [dbo].[SupplierGroup]'
GO
ALTER TABLE [dbo].[SupplierGroup] DROP CONSTRAINT [PK_SupplierGroup]
GO
PRINT N'Dropping index [IX_Code_Currency] from [APPS].[Currency]'
GO
DROP INDEX [IX_Code_Currency] ON [APPS].[Currency]
GO
PRINT N'Dropping index [CX_Notification] from [APPSYS].[Notification]'
GO
DROP INDEX [CX_Notification] ON [APPSYS].[Notification]
GO
PRINT N'Dropping index [IX_UserProfile] from [APPSYS].[UserProfile]'
GO
DROP INDEX [IX_UserProfile] ON [APPSYS].[UserProfile]
GO
PRINT N'Dropping index [CX_BankAccount] from [APPS].[BankAccount]'
GO
DROP INDEX [CX_BankAccount] ON [APPS].[BankAccount]
GO
PRINT N'Dropping index [CX_FunctionalCurrency] from [APPS].[Currency]'
GO
DROP INDEX [CX_FunctionalCurrency] ON [APPS].[Currency]
GO
PRINT N'Dropping index [CX_SupplierHeader] from [APPS].[SupplierHeader]'
GO
DROP INDEX [CX_SupplierHeader] ON [APPS].[SupplierHeader]
GO
PRINT N'Dropping index [CX_UserGroup] from [HR].[EmployeeGroup]'
GO
DROP INDEX [CX_UserGroup] ON [HR].[EmployeeGroup]
GO
PRINT N'Dropping index [CX_Employee] from [HR].[Employee]'
GO
DROP INDEX [CX_Employee] ON [HR].[Employee]
GO
PRINT N'Dropping index [CX_Group] from [HR].[Group]'
GO
DROP INDEX [CX_Group] ON [HR].[Group]
GO
PRINT N'Dropping [HR].[Group]'
GO
DROP TABLE [HR].[Group]
GO
PRINT N'Dropping [HR].[EmployeeGroup]'
GO
DROP TABLE [HR].[EmployeeGroup]
GO
PRINT N'Rebuilding [APPS].[BankAccount]'
GO
CREATE TABLE [APPS].[RG_Recovery_1_BankAccount]
(
[Id] [uniqueidentifier] NOT NULL,
[BankId] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[No] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_BankAccount] ON
GO
INSERT INTO [APPS].[RG_Recovery_1_BankAccount]([Id], [BankId], [SetOfBookId], [CX], [Disable], [No], [Name], [Description]) SELECT [Id], [BankId], [SetOfBookId], [CX], [Disable], [No], [Name], [Description] FROM [APPS].[BankAccount]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_BankAccount] OFF
GO
DROP TABLE [APPS].[BankAccount]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_1_BankAccount]', N'BankAccount', N'OBJECT'
GO
PRINT N'Creating index [CX_BankAccount] on [APPS].[BankAccount]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_BankAccount] ON [APPS].[BankAccount] ([CX])
GO
PRINT N'Creating primary key [PK_BankAccount] on [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [PK_BankAccount] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [INV].[Warehouse]'
GO
CREATE TABLE [INV].[RG_Recovery_2_Warehouse]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (50) NOT NULL,
[Location] [nvarchar] (500) NOT NULL,
[InventoryOrganizationId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [INV].[RG_Recovery_2_Warehouse] ON
GO
INSERT INTO [INV].[RG_Recovery_2_Warehouse]([Id], [CX], [Disable], [Code], [Name], [Location], [InventoryOrganizationId]) SELECT [Id], [CX], [Disable], [Code], [Name], [Location], [InventoryOrganizationId] FROM [INV].[Warehouse]
GO
SET IDENTITY_INSERT [INV].[RG_Recovery_2_Warehouse] OFF
GO
DROP TABLE [INV].[Warehouse]
GO
EXEC sp_rename N'[INV].[RG_Recovery_2_Warehouse]', N'Warehouse', N'OBJECT'
GO
PRINT N'Creating primary key [PK_Warehouse] on [INV].[Warehouse]'
GO
ALTER TABLE [INV].[Warehouse] ADD CONSTRAINT [PK_Warehouse] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Rebuilding [INV].[BinLocation]'
GO
CREATE TABLE [INV].[RG_Recovery_3_BinLocation]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Row] [nvarchar] (500) NOT NULL,
[Rack] [nvarchar] (500) NULL,
[Bin] [nvarchar] (500) NULL,
[WarehouseId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [INV].[RG_Recovery_3_BinLocation] ON
GO
INSERT INTO [INV].[RG_Recovery_3_BinLocation]([Id], [CX], [Disable], [Row], [Rack], [Bin], [WarehouseId]) SELECT [Id], [CX], [Disable], [Row], [Rack], [Bin], [WarehouseId] FROM [INV].[BinLocation]
GO
SET IDENTITY_INSERT [INV].[RG_Recovery_3_BinLocation] OFF
GO
DROP TABLE [INV].[BinLocation]
GO
EXEC sp_rename N'[INV].[RG_Recovery_3_BinLocation]', N'BinLocation', N'OBJECT'
GO
PRINT N'Creating primary key [PK_Bin] on [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] ADD CONSTRAINT [PK_Bin] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Altering [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ALTER COLUMN [AccountCode] [nvarchar] (100) NOT NULL
GO
PRINT N'Adding constraints to [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ADD CONSTRAINT [IX_ChartOfAccount] UNIQUE NONCLUSTERED  ([AccountCode])
GO
PRINT N'Rebuilding [APPS].[Currency]'
GO
CREATE TABLE [APPS].[RG_Recovery_4_Currency]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (3) NULL,
[Name] [nvarchar] (500) NULL,
[Disable] [bit] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Sequence] [int] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_4_Currency] ON
GO
INSERT INTO [APPS].[RG_Recovery_4_Currency]([Id], [BusinessGroupId], [Code], [Name], [Disable], [CX]) SELECT [Id], [BusinessGroupId], [Code], [Name], [Disable], [CX] FROM [APPS].[Currency]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_4_Currency] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[Currency]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_4_Currency]', RESEED, @idVal)
GO
DROP TABLE [APPS].[Currency]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_4_Currency]', N'Currency', N'OBJECT'
GO
PRINT N'Creating index [CX_FunctionalCurrency] on [APPS].[Currency]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_FunctionalCurrency] ON [APPS].[Currency] ([CX])
GO
PRINT N'Creating primary key [PK_FunctionalCurrency] on [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [PK_FunctionalCurrency] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [IX_Code_Currency] UNIQUE NONCLUSTERED  ([Code])
GO
PRINT N'Rebuilding [HR].[Employee]'
GO
CREATE TABLE [HR].[RG_Recovery_5_Employee]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Code] [nvarchar] (50) NOT NULL,
[DisplayName] [nvarchar] (200) NULL,
[PrimaryEmail] [nvarchar] (500) NULL,
[AlternativeEmail] [nvarchar] (500) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[JobTitleId] [uniqueidentifier] NOT NULL,
[JobLevelId] [uniqueidentifier] NOT NULL,
[JoinDate] [date] NOT NULL,
[EffectiveDate] [date] NULL,
[EndDate] [date] NULL,
[Status] [int] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_5_Employee] ON
GO
INSERT INTO [HR].[RG_Recovery_5_Employee]([Id], [CX], [Code], [DisplayName], [PrimaryEmail], [AlternativeEmail], [BusinessGroupId], [JobTitleId], [JobLevelId], [JoinDate], [EffectiveDate], [EndDate], [Status]) SELECT [Id], [CX], [Code], [DisplayName], [PrimaryEmail], [AlternativeEmail], [BusinessGroupId], [JobTitleId], [JobLevelId], [JoinDate], [EffectiveDate], [EndDate], [Status] FROM [HR].[Employee]
GO
SET IDENTITY_INSERT [HR].[RG_Recovery_5_Employee] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[HR].[Employee]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[HR].[RG_Recovery_5_Employee]', RESEED, @idVal)
GO
DROP TABLE [HR].[Employee]
GO
EXEC sp_rename N'[HR].[RG_Recovery_5_Employee]', N'Employee', N'OBJECT'
GO
PRINT N'Creating index [CX_Employee] on [HR].[Employee]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Employee] ON [HR].[Employee] ([CX])
GO
PRINT N'Creating primary key [PK_Employee] on [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [PK_Employee] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [HR].[EmployeePosition]'
GO
CREATE TABLE [HR].[EmployeePosition]
(
[EmployeeId] [uniqueidentifier] NOT NULL,
[PositionId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_UserGroup] on [HR].[EmployeePosition]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_UserGroup] ON [HR].[EmployeePosition] ([CX])
GO
PRINT N'Creating primary key [PK_UserGroup] on [HR].[EmployeePosition]'
GO
ALTER TABLE [HR].[EmployeePosition] ADD CONSTRAINT [PK_UserGroup] PRIMARY KEY NONCLUSTERED  ([EmployeeId], [PositionId])
GO
PRINT N'Creating [HR].[Position]'
GO
CREATE TABLE [HR].[Position]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[DivisionId] [uniqueidentifier] NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating index [CX_Group] on [HR].[Position]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Group] ON [HR].[Position] ([CX])
GO
PRINT N'Creating primary key [PK_Group] on [HR].[Position]'
GO
ALTER TABLE [HR].[Position] ADD CONSTRAINT [PK_Group] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[Item]'
GO
CREATE TABLE [APPS].[RG_Recovery_6_Item]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (100) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_6_Item] ON
GO
INSERT INTO [APPS].[RG_Recovery_6_Item]([Id], [CX], [Disable], [Code], [Name], [BusinessGroupId]) SELECT [Id], [CX], [Disable], [Code], [Name], [BusinessGroupId] FROM [APPS].[Item]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_6_Item] OFF
GO
DROP TABLE [APPS].[Item]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_6_Item]', N'Item', N'OBJECT'
GO
PRINT N'Creating index [CX_Item] on [APPS].[Item]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Item] ON [APPS].[Item] ([CX])
GO
PRINT N'Creating primary key [PK_GoodItem] on [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] ADD CONSTRAINT [PK_GoodItem] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] ADD CONSTRAINT [IX_Item] UNIQUE NONCLUSTERED  ([Code], [BusinessGroupId])
GO
PRINT N'Rebuilding [APPSYS].[Notification]'
GO
CREATE TABLE [APPSYS].[RG_Recovery_7_Notification]
(
[Id] [uniqueidentifier] NOT NULL,
[Time] [datetime] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Status] [int] NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[Content] [ntext] NOT NULL
)
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_7_Notification] ON
GO
INSERT INTO [APPSYS].[RG_Recovery_7_Notification]([Id], [Time], [CX], [Status], [UserId], [Content]) SELECT [Id], [Time], [CX], [Status], [UserId], [Content] FROM [APPSYS].[Notification]
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_7_Notification] OFF
GO
DROP TABLE [APPSYS].[Notification]
GO
EXEC sp_rename N'[APPSYS].[RG_Recovery_7_Notification]', N'Notification', N'OBJECT'
GO
PRINT N'Creating index [CX_Notification] on [APPSYS].[Notification]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Notification] ON [APPSYS].[Notification] ([CX])
GO
PRINT N'Creating primary key [PK_Notification] on [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [PK_Notification] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[PaymentMethod]'
GO
CREATE TABLE [APPS].[RG_Recovery_8_PaymentMethod]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[MethodName] [nvarchar] (50) NOT NULL,
[Sequence] [int] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_8_PaymentMethod] ON
GO
INSERT INTO [APPS].[RG_Recovery_8_PaymentMethod]([Id], [CX], [Disable], [MethodName], [Sequence], [SetOfBookId]) SELECT [Id], [CX], [Disable], [MethodName], [Sequence], [SetOfBookId] FROM [APPS].[PaymentMethod]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_8_PaymentMethod] OFF
GO
DROP TABLE [APPS].[PaymentMethod]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_8_PaymentMethod]', N'PaymentMethod', N'OBJECT'
GO
PRINT N'Creating index [CX_PaymentMethod] on [APPS].[PaymentMethod]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_PaymentMethod] ON [APPS].[PaymentMethod] ([CX])
GO
PRINT N'Creating primary key [PK_PaymentMethod] on [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [PK_PaymentMethod] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[SupplierHeader]'
GO
CREATE TABLE [APPS].[RG_Recovery_9_SupplierHeader]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (50) NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_9_SupplierHeader] ON
GO
INSERT INTO [APPS].[RG_Recovery_9_SupplierHeader]([Id], [BusinessGroupId], [CX], [Disable], [Name]) SELECT [Id], [BusinessGroupId], [CX], [Disable], [Name] FROM [APPS].[SupplierHeader]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_9_SupplierHeader] OFF
GO
DROP TABLE [APPS].[SupplierHeader]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_9_SupplierHeader]', N'SupplierHeader', N'OBJECT'
GO
PRINT N'Creating index [CX_SupplierHeader] on [APPS].[SupplierHeader]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_SupplierHeader] ON [APPS].[SupplierHeader] ([CX])
GO
PRINT N'Creating primary key [PK_SupplierHeader] on [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] ADD CONSTRAINT [PK_SupplierHeader] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[Tax]'
GO
CREATE TABLE [APPS].[RG_Recovery_10_Tax]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Rate] [decimal] (18, 4) NOT NULL,
[Description] [nvarchar] (500) NULL,
[Percent] [float] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_10_Tax] ON
GO
INSERT INTO [APPS].[RG_Recovery_10_Tax]([Id], [CX], [Disable], [SetOfBookId], [Code], [Name], [Description], [Percent]) SELECT [Id], [CX], [Disable], [SetOfBookId], [TaxCode], [Name], [Description], [Percent] FROM [APPS].[Tax]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_10_Tax] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[Tax]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_10_Tax]', RESEED, @idVal)
GO
DROP TABLE [APPS].[Tax]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_10_Tax]', N'Tax', N'OBJECT'
GO
PRINT N'Creating index [CX_Tax] on [APPS].[Tax]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Tax] ON [APPS].[Tax] ([CX])
GO
PRINT N'Creating primary key [PK_Tax] on [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [PK_Tax] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPSYS].[UserProfile]'
GO
CREATE TABLE [APPSYS].[RG_Recovery_11_UserProfile]
(
[Id] [uniqueidentifier] NOT NULL,
[Key] [nvarchar] (200) NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Value] [ntext] NOT NULL
)
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_11_UserProfile] ON
GO
INSERT INTO [APPSYS].[RG_Recovery_11_UserProfile]([Id], [Key], [UserId], [CX], [Value]) SELECT [Id], [Key], [UserId], [CX], [Value] FROM [APPSYS].[UserProfile]
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_11_UserProfile] OFF
GO
DROP TABLE [APPSYS].[UserProfile]
GO
EXEC sp_rename N'[APPSYS].[RG_Recovery_11_UserProfile]', N'UserProfile', N'OBJECT'
GO
PRINT N'Creating index [CX_UserProfile] on [APPSYS].[UserProfile]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_UserProfile] ON [APPSYS].[UserProfile] ([CX])
GO
PRINT N'Creating primary key [PK_UserProfile] on [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] ADD CONSTRAINT [PK_UserProfile] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Altering [APPSYS].[SystemConfiguration]'
GO
ALTER TABLE [APPSYS].[SystemConfiguration] ADD
[CX] [bigint] NOT NULL IDENTITY(1, 1)
GO
PRINT N'Rebuilding [AR].[Customer]'
GO
CREATE TABLE [AR].[RG_Recovery_12_Customer]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
SET IDENTITY_INSERT [AR].[RG_Recovery_12_Customer] ON
GO
INSERT INTO [AR].[RG_Recovery_12_Customer]([Id], [BusinessGroupId], [CX], [Disable], [Code], [Name]) SELECT [Id], [BusinessGroupId], [CX], [Disable], [Code], [Name] FROM [AR].[Customer]
GO
SET IDENTITY_INSERT [AR].[RG_Recovery_12_Customer] OFF
GO
DROP TABLE [AR].[Customer]
GO
EXEC sp_rename N'[AR].[RG_Recovery_12_Customer]', N'Customer', N'OBJECT'
GO
PRINT N'Creating primary key [PK_Customer] on [AR].[Customer]'
GO
ALTER TABLE [AR].[Customer] ADD CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Rebuilding [dbo].[CustomerGroup]'
GO
CREATE TABLE [dbo].[RG_Recovery_13_CustomerGroup]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_13_CustomerGroup] ON
GO
INSERT INTO [dbo].[RG_Recovery_13_CustomerGroup]([Id], [CX], [Disable], [Name], [LegalEntityId]) SELECT [Id], [CX], [Disable], [Name], [LegalEntityId] FROM [dbo].[CustomerGroup]
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_13_CustomerGroup] OFF
GO
DROP TABLE [dbo].[CustomerGroup]
GO
EXEC sp_rename N'[dbo].[RG_Recovery_13_CustomerGroup]', N'CustomerGroup', N'OBJECT'
GO
PRINT N'Creating primary key [PK_CustomerGroup] on [dbo].[CustomerGroup]'
GO
ALTER TABLE [dbo].[CustomerGroup] ADD CONSTRAINT [PK_CustomerGroup] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Rebuilding [dbo].[Stock]'
GO
CREATE TABLE [dbo].[RG_Recovery_14_Stock]
(
[Id] [uniqueidentifier] NOT NULL,
[GoodItemId] [uniqueidentifier] NOT NULL,
[WarehouseId] [uniqueidentifier] NOT NULL,
[Quantity] [decimal] (18, 4) NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_14_Stock] ON
GO
INSERT INTO [dbo].[RG_Recovery_14_Stock]([Id], [GoodItemId], [WarehouseId], [Quantity], [CX], [Disable]) SELECT [Id], [GoodItemId], [WarehouseId], [Quantity], [CX], [Disable] FROM [dbo].[Stock]
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_14_Stock] OFF
GO
DROP TABLE [dbo].[Stock]
GO
EXEC sp_rename N'[dbo].[RG_Recovery_14_Stock]', N'Stock', N'OBJECT'
GO
PRINT N'Creating primary key [PK_Stock] on [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] ADD CONSTRAINT [PK_Stock] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Rebuilding [dbo].[SupplierGroup]'
GO
CREATE TABLE [dbo].[RG_Recovery_15_SupplierGroup]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_15_SupplierGroup] ON
GO
INSERT INTO [dbo].[RG_Recovery_15_SupplierGroup]([Id], [CX], [Disable], [Name], [LegalEntityId]) SELECT [Id], [CX], [Disable], [Name], [LegalEntityId] FROM [dbo].[SupplierGroup]
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_15_SupplierGroup] OFF
GO
DROP TABLE [dbo].[SupplierGroup]
GO
EXEC sp_rename N'[dbo].[RG_Recovery_15_SupplierGroup]', N'SupplierGroup', N'OBJECT'
GO
PRINT N'Creating primary key [PK_SupplierGroup] on [dbo].[SupplierGroup]'
GO
ALTER TABLE [dbo].[SupplierGroup] ADD CONSTRAINT [PK_SupplierGroup] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] ADD CONSTRAINT [CX_Code_AssetOrganization] UNIQUE CLUSTERED  ([Code], [DivisionId])
GO
PRINT N'Creating index [CX_CostCenter] on [APPS].[CostCenter]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_CostCenter] ON [APPS].[CostCenter] ([CX])
GO
PRINT N'Creating index [CX_FiscalCalendar] on [APPS].[FiscalCalendar]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_FiscalCalendar] ON [APPS].[FiscalCalendar] ([CX])
GO
PRINT N'Creating index [CX_InventoryOrganization] on [APPS].[InventoryOrganization]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_InventoryOrganization] ON [APPS].[InventoryOrganization] ([CX])
GO
PRINT N'Creating index [CX_ProjectOrganization] on [APPS].[ProjectOrganization]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_ProjectOrganization] ON [APPS].[ProjectOrganization] ([CX])
GO
PRINT N'Creating index [CX_UnitOfMeasure] on [APPS].[UnitOfMeasure]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_UnitOfMeasure] ON [APPS].[UnitOfMeasure] ([CX])
GO
PRINT N'Creating primary key [PK_CostCenter] on [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [PK_CostCenter] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] ADD CONSTRAINT [IX_DescriptiveFlexField] UNIQUE NONCLUSTERED  ([Code], [BusinessGroupId])
GO
PRINT N'Creating primary key [PK_FiscalCalendar] on [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] ADD CONSTRAINT [PK_FiscalCalendar] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding constraints to [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] ADD CONSTRAINT [IX_KeyFlexField] UNIQUE NONCLUSTERED  ([Code], [BusinessGroupId])
GO
PRINT N'Creating primary key [PK_UOM] on [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] ADD CONSTRAINT [PK_UOM] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [FK_Notification_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[UserProfile]'
GO
ALTER TABLE [APPSYS].[UserProfile] ADD CONSTRAINT [FK_UserProfile_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[BankAccount]'
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [FK_BankAccount_Bank] FOREIGN KEY ([BankId]) REFERENCES [APPS].[Bank] ([Id])
GO
ALTER TABLE [APPS].[BankAccount] ADD CONSTRAINT [FK_BankAccount_SetOfBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Currency]'
GO
ALTER TABLE [APPS].[Currency] ADD CONSTRAINT [FK_Currency_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Item]'
GO
ALTER TABLE [APPS].[Item] ADD CONSTRAINT [FK_Item_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[PaymentMethod]'
GO
ALTER TABLE [APPS].[PaymentMethod] ADD CONSTRAINT [FK_PaymentMethod_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] ADD CONSTRAINT [FK_SupplierHeader_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [FK_Tax_SetofBook1] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[EmployeePosition]'
GO
ALTER TABLE [HR].[EmployeePosition] ADD CONSTRAINT [FK_EmployeeGroup_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO
ALTER TABLE [HR].[EmployeePosition] ADD CONSTRAINT [FK_EmployeeGroup_Group] FOREIGN KEY ([PositionId]) REFERENCES [HR].[Position] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_Department] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[HROrganization] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobLevel] FOREIGN KEY ([JobLevelId]) REFERENCES [HR].[JobLevel] ([Id])
GO
ALTER TABLE [HR].[Employee] ADD CONSTRAINT [FK_Employee_JobTitle] FOREIGN KEY ([JobTitleId]) REFERENCES [HR].[JobTitle] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[Position]'
GO
ALTER TABLE [HR].[Position] ADD CONSTRAINT [FK_Position_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] ADD CONSTRAINT [FK_BinLocation_Warehouse] FOREIGN KEY ([WarehouseId]) REFERENCES [INV].[Warehouse] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[AssetOrganization]'
GO
ALTER TABLE [APPS].[AssetOrganization] ADD CONSTRAINT [FK_AssetOrganization_Division] FOREIGN KEY ([DivisionId]) REFERENCES [APPS].[Division] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[SetOfBook]'
GO
ALTER TABLE [APPS].[SetOfBook] ADD CONSTRAINT [FK_SetOfBook_Currency] FOREIGN KEY ([CurrencyId]) REFERENCES [APPS].[Currency] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] ADD CONSTRAINT [FK_JobHistory_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] ADD CONSTRAINT [FK_User_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [HR].[Employee] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\007_20190704-1621_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\007_20190704-1621_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('a377a10f-c2d9-480d-8a2d-5778d88fe381' AS UNIQUEIDENTIFIER), 'AC89FEDCD379BC0C4210256E19DB2B2ED4CA44EBB7179121CFEC5A4B5D4248B2', 'Migrations\007_20190704-1621_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\007_20190704-1621_PC.sql", ID: {a377a10f-c2d9-480d-8a2d-5778d88fe381} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3bb56e60-b21e-463d-943d-966b31c8ae94' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\008_20190709-0931_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\008_20190709-0931_PC.sql", ID: {3bb56e60-b21e-463d-943d-966b31c8ae94} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\008_20190709-0931_PC.sql" ----------------------------
GO
-- <Migration ID="3bb56e60-b21e-463d-943d-966b31c8ae94" />
GO

PRINT N'Dropping foreign keys from [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] DROP CONSTRAINT [FK_Notification_User]
GO
PRINT N'Dropping foreign keys from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_Department]
GO
PRINT N'Dropping foreign keys from [INV].[BinLocation]'
GO
ALTER TABLE [INV].[BinLocation] DROP CONSTRAINT [FK_BinLocation_Warehouse]
GO
PRINT N'Dropping constraints from [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] DROP CONSTRAINT [PK_Notification]
GO
PRINT N'Dropping constraints from [INV].[Warehouse]'
GO
ALTER TABLE [INV].[Warehouse] DROP CONSTRAINT [PK_Warehouse]
GO
PRINT N'Dropping index [CX_Notification] from [APPSYS].[Notification]'
GO
DROP INDEX [CX_Notification] ON [APPSYS].[Notification]
GO
PRINT N'Dropping [INV].[Warehouse]'
GO
DROP TABLE [INV].[Warehouse]
GO
PRINT N'Altering [APPSYS].[AuditLog]'
GO
ALTER TABLE [APPSYS].[AuditLog] ALTER COLUMN [NewData] [ntext] NULL
GO
PRINT N'Altering [APPS].[LegalEntity]'
GO
ALTER TABLE [APPS].[LegalEntity] ALTER COLUMN [ShortName] [nvarchar] (500) NULL
GO
PRINT N'Rebuilding [APPSYS].[Notification]'
GO
CREATE TABLE [APPSYS].[RG_Recovery_1_Notification]
(
[Id] [uniqueidentifier] NOT NULL,
[Time] [datetime] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Unread] [bit] NOT NULL,
[UserId] [uniqueidentifier] NOT NULL,
[Content] [ntext] NOT NULL,
[URL] [ntext] NULL
)
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_1_Notification] ON
GO
INSERT INTO [APPSYS].[RG_Recovery_1_Notification]([Id], [Time], [CX], [UserId], [Content]) SELECT [Id], [Time], [CX], [UserId], [Content] FROM [APPSYS].[Notification]
GO
SET IDENTITY_INSERT [APPSYS].[RG_Recovery_1_Notification] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPSYS].[Notification]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPSYS].[RG_Recovery_1_Notification]', RESEED, @idVal)
GO
DROP TABLE [APPSYS].[Notification]
GO
EXEC sp_rename N'[APPSYS].[RG_Recovery_1_Notification]', N'Notification', N'OBJECT'
GO
PRINT N'Creating index [CX_Notification] on [APPSYS].[Notification]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Notification] ON [APPSYS].[Notification] ([CX])
GO
PRINT N'Creating primary key [PK_Notification] on [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [PK_Notification] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating index [IX_Time_Notification] on [APPSYS].[Notification]'
GO
CREATE NONCLUSTERED INDEX [IX_Time_Notification] ON [APPSYS].[Notification] ([Time])
GO
PRINT N'Altering [dbo].[Stock]'
GO
EXEC sp_rename N'[dbo].[Stock].[GoodItemId]', N'ItemId', N'COLUMN'
GO
EXEC sp_rename N'[dbo].[Stock].[WarehouseId]', N'InventoryOrganizationId', N'COLUMN'
GO
PRINT N'Creating [dbo].[StockAdjustment]'
GO
CREATE TABLE [dbo].[StockAdjustment]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[InventoryOrganizationId] [uniqueidentifier] NOT NULL,
[AdjustmentReasonId] [uniqueidentifier] NOT NULL,
[RequesterId] [uniqueidentifier] NOT NULL,
[DocumentDate] [date] NOT NULL,
[Memo] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating primary key [PK_StockAdjustment] on [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [PK_StockAdjustment] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[StockAdjustmentReason]'
GO
CREATE TABLE [dbo].[StockAdjustmentReason]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL,
[Reason] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating primary key [PK_StockAdjustmentReason] on [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] ADD CONSTRAINT [PK_StockAdjustmentReason] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[StockRequest]'
GO
CREATE TABLE [dbo].[StockRequest]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[InventoryOrganizationId] [uniqueidentifier] NOT NULL,
[RequesterId] [uniqueidentifier] NOT NULL,
[DocumentDate] [date] NOT NULL,
[DocumentNo] [nvarchar] (200) NOT NULL,
[Reason] [nvarchar] (500) NULL
)
GO
PRINT N'Creating index [CX_StockRequest] on [dbo].[StockRequest]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_StockRequest] ON [dbo].[StockRequest] ([CX])
GO
PRINT N'Creating primary key [PK_StockRequest] on [dbo].[StockRequest]'
GO
ALTER TABLE [dbo].[StockRequest] ADD CONSTRAINT [PK_StockRequest] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[StockRequestDetail]'
GO
CREATE TABLE [dbo].[StockRequestDetail]
(
[Id] [uniqueidentifier] NOT NULL,
[StockRequestId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[ItemId] [uniqueidentifier] NOT NULL,
[UnitOfMeasureId] [uniqueidentifier] NOT NULL,
[RequestedQuantity] [int] NOT NULL,
[Remark] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating primary key [PK_StockRequestDetail] on [dbo].[StockRequestDetail]'
GO
ALTER TABLE [dbo].[StockRequestDetail] ADD CONSTRAINT [PK_StockRequestDetail] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Altering [INV].[BinLocation]'
GO
EXEC sp_rename N'[INV].[BinLocation].[WarehouseId]', N'InventoryOrganizationId', N'COLUMN'
GO
PRINT N'Adding foreign keys to [APPSYS].[Notification]'
GO
ALTER TABLE [APPSYS].[Notification] ADD CONSTRAINT [FK_Notification_User] FOREIGN KEY ([UserId]) REFERENCES [APPSYS].[User] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [FK_StockAdjustment_StockAdjustmentReason] FOREIGN KEY ([AdjustmentReasonId]) REFERENCES [dbo].[StockAdjustmentReason] ([Id])
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [FK_StockAdjustment_InventoryOrganization] FOREIGN KEY ([InventoryOrganizationId]) REFERENCES [APPS].[InventoryOrganization] ([Id])
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [FK_StockAdjustment_Employee] FOREIGN KEY ([RequesterId]) REFERENCES [HR].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] ADD CONSTRAINT [FK_StockAdjustmentReason_LegalEntity] FOREIGN KEY ([LegalEntityId]) REFERENCES [APPS].[LegalEntity] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockRequestDetail]'
GO
ALTER TABLE [dbo].[StockRequestDetail] ADD CONSTRAINT [FK_StockRequestDetail_StockRequest] FOREIGN KEY ([StockRequestId]) REFERENCES [dbo].[StockRequest] ([Id])
GO
ALTER TABLE [dbo].[StockRequestDetail] ADD CONSTRAINT [FK_StockRequestDetail_UnitOfMeasure] FOREIGN KEY ([UnitOfMeasureId]) REFERENCES [APPS].[UnitOfMeasure] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockRequest]'
GO
ALTER TABLE [dbo].[StockRequest] ADD CONSTRAINT [FK_StockRequest_InventoryOrganization] FOREIGN KEY ([InventoryOrganizationId]) REFERENCES [APPS].[InventoryOrganization] ([Id])
GO
ALTER TABLE [dbo].[StockRequest] ADD CONSTRAINT [FK_StockRequest_Employee] FOREIGN KEY ([RequesterId]) REFERENCES [HR].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] ADD CONSTRAINT [FK_Stock_InventoryOrganization] FOREIGN KEY ([InventoryOrganizationId]) REFERENCES [APPS].[InventoryOrganization] ([Id])
GO
ALTER TABLE [dbo].[Stock] ADD CONSTRAINT [FK_Stock_Item] FOREIGN KEY ([ItemId]) REFERENCES [APPS].[Item] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\008_20190709-0931_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\008_20190709-0931_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('3bb56e60-b21e-463d-943d-966b31c8ae94' AS UNIQUEIDENTIFIER), '3F7B30DA90E0B8E03358AA0EC07DB171A0A3413A73FD4EB4B89A28221C30BFF8', 'Migrations\008_20190709-0931_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\008_20190709-0931_PC.sql", ID: {3bb56e60-b21e-463d-943d-966b31c8ae94} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('4a6458a4-827c-4a1f-9ce9-ef091cbfc925' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\009_20190709-1625_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\009_20190709-1625_PC.sql", ID: {4a6458a4-827c-4a1f-9ce9-ef091cbfc925} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\009_20190709-1625_PC.sql" ----------------------------
GO
-- <Migration ID="4a6458a4-827c-4a1f-9ce9-ef091cbfc925" />
GO

PRINT N'Dropping foreign keys from [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] DROP CONSTRAINT [FK_CostCenter_ChartOfAccount]
GO
PRINT N'Dropping foreign keys from [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] DROP CONSTRAINT [FK_CustomerHeader_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] DROP CONSTRAINT [FK_DescriptiveFledField_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] DROP CONSTRAINT [FK_FiscalCalendar_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] DROP CONSTRAINT [FK_KeyFlexField_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] DROP CONSTRAINT [FK_SupplierHeader_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] DROP CONSTRAINT [FK_StockAdjustmentReason_LegalEntity]
GO
PRINT N'Dropping foreign keys from [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] DROP CONSTRAINT [FK_StockAdjustment_StockAdjustmentReason]
GO
PRINT N'Dropping constraints from [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] DROP CONSTRAINT [PK_CostCenter]
GO
PRINT N'Dropping constraints from [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] DROP CONSTRAINT [PK_CustomerHeader]
GO
PRINT N'Dropping constraints from [APPS].[CustomerHeader]'
GO
ALTER TABLE [APPS].[CustomerHeader] DROP CONSTRAINT [IX_Name_CustomerHeader]
GO
PRINT N'Dropping constraints from [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] DROP CONSTRAINT [PK_DescriptiveFledField]
GO
PRINT N'Dropping constraints from [APPS].[DescriptiveFlexField]'
GO
ALTER TABLE [APPS].[DescriptiveFlexField] DROP CONSTRAINT [IX_DescriptiveFlexField]
GO
PRINT N'Dropping constraints from [APPS].[FiscalCalendar]'
GO
ALTER TABLE [APPS].[FiscalCalendar] DROP CONSTRAINT [PK_FiscalCalendar]
GO
PRINT N'Dropping constraints from [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] DROP CONSTRAINT [PK_KeyFlexField]
GO
PRINT N'Dropping constraints from [APPS].[KeyFlexField]'
GO
ALTER TABLE [APPS].[KeyFlexField] DROP CONSTRAINT [IX_KeyFlexField]
GO
PRINT N'Dropping constraints from [APPS].[SupplierHeader]'
GO
ALTER TABLE [APPS].[SupplierHeader] DROP CONSTRAINT [PK_SupplierHeader]
GO
PRINT N'Dropping constraints from [AP].[SupplierHeaderValue]'
GO
ALTER TABLE [AP].[SupplierHeaderValue] DROP CONSTRAINT [PK_SupplierHeaderValue]
GO
PRINT N'Dropping constraints from [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] DROP CONSTRAINT [PK_StockAdjustmentReason]
GO
PRINT N'Dropping constraints from [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] DROP CONSTRAINT [PK_StockAdjustment]
GO
PRINT N'Dropping constraints from [dbo].[StockRequestDetail]'
GO
ALTER TABLE [dbo].[StockRequestDetail] DROP CONSTRAINT [PK_StockRequestDetail]
GO
PRINT N'Dropping constraints from [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] DROP CONSTRAINT [PK_Stock]
GO
PRINT N'Dropping index [CX_CostCenter] from [APPS].[CostCenter]'
GO
DROP INDEX [CX_CostCenter] ON [APPS].[CostCenter]
GO
PRINT N'Dropping index [CX_CustomerHeader] from [APPS].[CustomerHeader]'
GO
DROP INDEX [CX_CustomerHeader] ON [APPS].[CustomerHeader]
GO
PRINT N'Dropping index [CX_DescriptiveFledField] from [APPS].[DescriptiveFlexField]'
GO
DROP INDEX [CX_DescriptiveFledField] ON [APPS].[DescriptiveFlexField]
GO
PRINT N'Dropping index [CX_FiscalCalendar] from [APPS].[FiscalCalendar]'
GO
DROP INDEX [CX_FiscalCalendar] ON [APPS].[FiscalCalendar]
GO
PRINT N'Dropping index [CX_KeyFlexField] from [APPS].[KeyFlexField]'
GO
DROP INDEX [CX_KeyFlexField] ON [APPS].[KeyFlexField]
GO
PRINT N'Dropping index [CX_SupplierHeader] from [APPS].[SupplierHeader]'
GO
DROP INDEX [CX_SupplierHeader] ON [APPS].[SupplierHeader]
GO
PRINT N'Dropping index [CX_SupplierHeaderValue] from [AP].[SupplierHeaderValue]'
GO
DROP INDEX [CX_SupplierHeaderValue] ON [AP].[SupplierHeaderValue]
GO
PRINT N'Dropping [AP].[SupplierHeaderValue]'
GO
DROP TABLE [AP].[SupplierHeaderValue]
GO
PRINT N'Dropping [APPS].[SupplierHeader]'
GO
DROP TABLE [APPS].[SupplierHeader]
GO
PRINT N'Dropping [APPS].[KeyFlexField]'
GO
DROP TABLE [APPS].[KeyFlexField]
GO
PRINT N'Dropping [APPS].[FiscalCalendar]'
GO
DROP TABLE [APPS].[FiscalCalendar]
GO
PRINT N'Dropping [APPS].[DescriptiveFlexField]'
GO
DROP TABLE [APPS].[DescriptiveFlexField]
GO
PRINT N'Dropping [APPS].[CustomerHeader]'
GO
DROP TABLE [APPS].[CustomerHeader]
GO
PRINT N'Creating [APPS].[FiscalYear]'
GO
CREATE TABLE [APPS].[FiscalYear]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[StartDate] [datetime] NOT NULL,
[EndDate] [datetime] NOT NULL,
[Status] [int] NOT NULL CONSTRAINT [DF_FiscalYear_Status] DEFAULT ((0))
)
GO
PRINT N'Creating index [CX_FiscalCalendar] on [APPS].[FiscalYear]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_FiscalCalendar] ON [APPS].[FiscalYear] ([CX])
GO
PRINT N'Creating primary key [PK_FiscalCalendar] on [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] ADD CONSTRAINT [PK_FiscalCalendar] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[AccountingPeriod]'
GO
CREATE TABLE [APPS].[AccountingPeriod]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL,
[Disable] [bit] NOT NULL,
[FiscalYearId] [uniqueidentifier] NOT NULL,
[StartPeriod] [date] NOT NULL,
[EndPeriod] [date] NOT NULL,
[Status] [int] NOT NULL
)
GO
PRINT N'Creating primary key [PK_AccountingPeriod] on [APPS].[AccountingPeriod]'
GO
ALTER TABLE [APPS].[AccountingPeriod] ADD CONSTRAINT [PK_AccountingPeriod] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Altering [APPS].[ChartOfAccount]'
GO
ALTER TABLE [APPS].[ChartOfAccount] ADD
[ParentId] [uniqueidentifier] NULL
GO
PRINT N'Creating [APPS].[COATemplate]'
GO
CREATE TABLE [APPS].[COATemplate]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Name] [nvarchar] (500) NOT NULL,
[ParentId] [uniqueidentifier] NULL
)
GO
PRINT N'Creating index [CX_COATemplate] on [APPS].[COATemplate]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_COATemplate] ON [APPS].[COATemplate] ([CX])
GO
PRINT N'Creating primary key [PK_COATemplate] on [APPS].[COATemplate]'
GO
ALTER TABLE [APPS].[COATemplate] ADD CONSTRAINT [PK_COATemplate] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[COATemplateDetail]'
GO
CREATE TABLE [APPS].[COATemplateDetail]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[COATemplateId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Description] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating index [CX_COATemplateDetail] on [APPS].[COATemplateDetail]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_COATemplateDetail] ON [APPS].[COATemplateDetail] ([CX])
GO
PRINT N'Creating primary key [PK_COATemplateDetail] on [APPS].[COATemplateDetail]'
GO
ALTER TABLE [APPS].[COATemplateDetail] ADD CONSTRAINT [PK_COATemplateDetail] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [APPS].[CostCenter]'
GO
CREATE TABLE [APPS].[RG_Recovery_1_CostCenter]
(
[Id] [uniqueidentifier] NOT NULL,
[Disable] [bit] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Code] [nvarchar] (500) NOT NULL,
[Name] [nvarchar] (500) NULL,
[ParentId] [uniqueidentifier] NOT NULL,
[ChartOfAccountId] [uniqueidentifier] NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_CostCenter] ON
GO
INSERT INTO [APPS].[RG_Recovery_1_CostCenter]([Id], [Disable], [CX], [Code], [Name], [ParentId], [ChartOfAccountId]) SELECT [Id], [Disable], [CX], [Code], [Name], [ParentId], [ChartOfAccountId] FROM [APPS].[CostCenter]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_CostCenter] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[CostCenter]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_1_CostCenter]', RESEED, @idVal)
GO
DROP TABLE [APPS].[CostCenter]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_1_CostCenter]', N'CostCenter', N'OBJECT'
GO
PRINT N'Creating index [CX_CostCenter] on [APPS].[CostCenter]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_CostCenter] ON [APPS].[CostCenter] ([CX])
GO
PRINT N'Creating primary key [PK_CostCenter] on [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [PK_CostCenter] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Rebuilding [dbo].[StockAdjustmentReason]'
GO
CREATE TABLE [dbo].[RG_Recovery_2_StockAdjustmentReason]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[LegalEntityId] [uniqueidentifier] NOT NULL,
[Reason] [nvarchar] (500) NOT NULL
)
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_2_StockAdjustmentReason] ON
GO
INSERT INTO [dbo].[RG_Recovery_2_StockAdjustmentReason]([Id], [CX], [Disable], [LegalEntityId], [Reason]) SELECT [Id], [CX], [Disable], [LegalEntityId], [Reason] FROM [dbo].[StockAdjustmentReason]
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_2_StockAdjustmentReason] OFF
GO
DROP TABLE [dbo].[StockAdjustmentReason]
GO
EXEC sp_rename N'[dbo].[RG_Recovery_2_StockAdjustmentReason]', N'StockAdjustmentReason', N'OBJECT'
GO
PRINT N'Creating index [CX_StockAdjustmentReason] on [dbo].[StockAdjustmentReason]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_StockAdjustmentReason] ON [dbo].[StockAdjustmentReason] ([Id])
GO
PRINT N'Creating primary key [PK_StockAdjustmentReason] on [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] ADD CONSTRAINT [PK_StockAdjustmentReason] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[TaxTemplate]'
GO
CREATE TABLE [APPS].[TaxTemplate]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Name] [nvarchar] (500) NOT NULL,
[Type] [nvarchar] (50) NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL
)
GO
PRINT N'Creating index [CX_TaxTemplate] on [APPS].[TaxTemplate]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_TaxTemplate] ON [APPS].[TaxTemplate] ([CX])
GO
PRINT N'Creating primary key [PK_TemplateTax] on [APPS].[TaxTemplate]'
GO
ALTER TABLE [APPS].[TaxTemplate] ADD CONSTRAINT [PK_TemplateTax] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[TaxTemplateDetail]'
GO
CREATE TABLE [APPS].[TaxTemplateDetail]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[TaxTemplateId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[UnitOfMeasureId] [uniqueidentifier] NOT NULL,
[Rate] [decimal] (18, 4) NOT NULL,
[Description] [nvarchar] (500) NULL
)
GO
PRINT N'Creating index [CX_TaxTemplateDetail] on [APPS].[TaxTemplateDetail]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_TaxTemplateDetail] ON [APPS].[TaxTemplateDetail] ([Id])
GO
PRINT N'Creating primary key [PK_TemplateTaxDetail] on [APPS].[TaxTemplateDetail]'
GO
ALTER TABLE [APPS].[TaxTemplateDetail] ADD CONSTRAINT [PK_TemplateTaxDetail] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating index [CX_StockAdjustment] on [dbo].[StockAdjustment]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_StockAdjustment] ON [dbo].[StockAdjustment] ([CX])
GO
PRINT N'Creating index [CX_StockRequestDetail] on [dbo].[StockRequestDetail]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_StockRequestDetail] ON [dbo].[StockRequestDetail] ([CX])
GO
PRINT N'Creating index [CX_Stock] on [dbo].[Stock]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Stock] ON [dbo].[Stock] ([CX])
GO
PRINT N'Creating primary key [PK_StockAdjustment] on [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [PK_StockAdjustment] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating primary key [PK_StockRequestDetail] on [dbo].[StockRequestDetail]'
GO
ALTER TABLE [dbo].[StockRequestDetail] ADD CONSTRAINT [PK_StockRequestDetail] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating primary key [PK_Stock] on [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] ADD CONSTRAINT [PK_Stock] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [FK_CostCenter_ChartOfAccount] FOREIGN KEY ([ChartOfAccountId]) REFERENCES [APPS].[ChartOfAccount] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] ADD CONSTRAINT [FK_FiscalCalendar_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockAdjustmentReason]'
GO
ALTER TABLE [dbo].[StockAdjustmentReason] ADD CONSTRAINT [FK_StockAdjustmentReason_LegalEntity] FOREIGN KEY ([LegalEntityId]) REFERENCES [APPS].[LegalEntity] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [FK_StockAdjustment_StockAdjustmentReason] FOREIGN KEY ([AdjustmentReasonId]) REFERENCES [dbo].[StockAdjustmentReason] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[AccountingPeriod]'
GO
ALTER TABLE [APPS].[AccountingPeriod] ADD CONSTRAINT [FK_AccountingPeriod_FiscalYear] FOREIGN KEY ([FiscalYearId]) REFERENCES [APPS].[FiscalYear] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[COATemplateDetail]'
GO
ALTER TABLE [APPS].[COATemplateDetail] ADD CONSTRAINT [FK_COATemplateDetail_COATemplate] FOREIGN KEY ([COATemplateId]) REFERENCES [APPS].[COATemplate] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[COATemplate]'
GO
ALTER TABLE [APPS].[COATemplate] ADD CONSTRAINT [FK_COATemplate_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ADD CONSTRAINT [FK_CostCenter_SetOfBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[TaxTemplateDetail]'
GO
ALTER TABLE [APPS].[TaxTemplateDetail] ADD CONSTRAINT [FK_TaxTemplateDetail_TaxTemplate] FOREIGN KEY ([TaxTemplateId]) REFERENCES [APPS].[TaxTemplate] ([Id])
GO
ALTER TABLE [APPS].[TaxTemplateDetail] ADD CONSTRAINT [FK_TaxTemplateDetail_UnitOfMeasure] FOREIGN KEY ([UnitOfMeasureId]) REFERENCES [APPS].[UnitOfMeasure] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[TaxTemplate]'
GO
ALTER TABLE [APPS].[TaxTemplate] ADD CONSTRAINT [FK_TaxTemplate_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Creating extended properties'
GO
EXEC sp_addextendedproperty N'MS_Description', N'0 = CLOSE, 1 = OPEN', 'SCHEMA', N'APPS', 'TABLE', N'AccountingPeriod', 'COLUMN', N'Status'
GO
EXEC sp_addextendedproperty N'MS_Description', N'0 = CLOSE, 1 = OPEN', 'SCHEMA', N'APPS', 'TABLE', N'FiscalYear', 'COLUMN', N'Status'
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\009_20190709-1625_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\009_20190709-1625_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('4a6458a4-827c-4a1f-9ce9-ef091cbfc925' AS UNIQUEIDENTIFIER), '014379B7690A1F5E69BB47738E8921E6AFD814E58F05C97CD52770F9A261242C', 'Migrations\009_20190709-1625_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\009_20190709-1625_PC.sql", ID: {4a6458a4-827c-4a1f-9ce9-ef091cbfc925} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('38d4d1f5-5da8-44f0-9e99-bd8c65642f79' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\010_20190710-1423_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\010_20190710-1423_PC.sql", ID: {38d4d1f5-5da8-44f0-9e99-bd8c65642f79} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\010_20190710-1423_PC.sql" ----------------------------
GO
-- <Migration ID="38d4d1f5-5da8-44f0-9e99-bd8c65642f79" />
GO

PRINT N'Dropping foreign keys from [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] DROP CONSTRAINT [FK_Tax_SetofBook1]
GO
PRINT N'Dropping foreign keys from [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] DROP CONSTRAINT [FK_Stock_Item]
GO
ALTER TABLE [dbo].[Stock] DROP CONSTRAINT [FK_Stock_InventoryOrganization]
GO
PRINT N'Dropping constraints from [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] DROP CONSTRAINT [PK_Tax]
GO
PRINT N'Dropping constraints from [dbo].[Stock]'
GO
ALTER TABLE [dbo].[Stock] DROP CONSTRAINT [PK_Stock]
GO
PRINT N'Dropping index [CX_Tax] from [APPS].[Tax]'
GO
DROP INDEX [CX_Tax] ON [APPS].[Tax]
GO
PRINT N'Dropping index [CX_Stock] from [dbo].[Stock]'
GO
DROP INDEX [CX_Stock] ON [dbo].[Stock]
GO
PRINT N'Dropping [dbo].[Stock]'
GO
DROP TABLE [dbo].[Stock]
GO
PRINT N'Altering [APPS].[CostCenter]'
GO
ALTER TABLE [APPS].[CostCenter] ALTER COLUMN [ParentId] [uniqueidentifier] NULL
GO
PRINT N'Altering [APPS].[UnitOfMeasure]'
GO
ALTER TABLE [APPS].[UnitOfMeasure] DROP
COLUMN [AllowedPrecision]
GO
PRINT N'Rebuilding [APPS].[Tax]'
GO
CREATE TABLE [APPS].[RG_Recovery_1_Tax]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[Rate] [decimal] (18, 4) NOT NULL,
[Description] [nvarchar] (500) NULL,
[UnitOfMeasureId] [uniqueidentifier] NULL,
[Type] [nvarchar] (50) NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_Tax] ON
GO
INSERT INTO [APPS].[RG_Recovery_1_Tax]([Id], [CX], [Disable], [SetOfBookId], [Code], [Name], [Rate], [Description]) SELECT [Id], [CX], [Disable], [SetOfBookId], [Code], [Name], [Rate], [Description] FROM [APPS].[Tax]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_Tax] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[Tax]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_1_Tax]', RESEED, @idVal)
GO
DROP TABLE [APPS].[Tax]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_1_Tax]', N'Tax', N'OBJECT'
GO
PRINT N'Creating index [CX_Tax] on [APPS].[Tax]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Tax] ON [APPS].[Tax] ([CX])
GO
PRINT N'Creating primary key [PK_Tax] on [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [PK_Tax] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [dbo].[InventoryTransaction]'
GO
CREATE TABLE [dbo].[InventoryTransaction]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[ChartOfAccountId] [uniqueidentifier] NOT NULL,
[DocumentNumber] [nvarchar] (50) NOT NULL,
[Type] [int] NOT NULL CONSTRAINT [DF_StockDetail_Type] DEFAULT ((0)),
[CostPrice] [decimal] (18, 4) NOT NULL
)
GO
PRINT N'Creating primary key [PK_StockDetail] on [dbo].[InventoryTransaction]'
GO
ALTER TABLE [dbo].[InventoryTransaction] ADD CONSTRAINT [PK_StockDetail] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [FK_Tax_SetofBook1] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Tax]'
GO
ALTER TABLE [APPS].[Tax] ADD CONSTRAINT [FK_Tax_UnitOfMeasure] FOREIGN KEY ([UnitOfMeasureId]) REFERENCES [APPS].[UnitOfMeasure] ([Id])
GO
PRINT N'Creating extended properties'
GO
EXEC sp_addextendedproperty N'MS_Description', N'Type = VAT, ENV, IMP, SPEC, TNCN', 'SCHEMA', N'APPS', 'TABLE', N'Tax', 'COLUMN', N'Type'
GO
EXEC sp_addextendedproperty N'MS_Description', N'1 = INPUT, 2 = OUTPUT', 'SCHEMA', N'dbo', 'TABLE', N'InventoryTransaction', 'COLUMN', N'Type'
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\010_20190710-1423_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\010_20190710-1423_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('38d4d1f5-5da8-44f0-9e99-bd8c65642f79' AS UNIQUEIDENTIFIER), '0B85A70BC0187B3055EAEE5B278FA9C312E61E9DDAF0FBA0289978D8199D4EC2', 'Migrations\010_20190710-1423_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\010_20190710-1423_PC.sql", ID: {38d4d1f5-5da8-44f0-9e99-bd8c65642f79} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('f094403a-3e11-4d8b-89d0-c680cf302395' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\011_20190710-1438_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\011_20190710-1438_PC.sql", ID: {f094403a-3e11-4d8b-89d0-c680cf302395} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\011_20190710-1438_PC.sql" ----------------------------
GO
-- <Migration ID="f094403a-3e11-4d8b-89d0-c680cf302395" />
GO

PRINT N'Dropping extended properties'
GO
EXEC sp_dropextendedproperty N'MS_Description', 'SCHEMA', N'APPS', 'TABLE', N'FiscalYear', 'COLUMN', N'Status'
GO
PRINT N'Dropping foreign keys from [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] DROP CONSTRAINT [FK_FiscalCalendar_SetofBook]
GO
PRINT N'Dropping foreign keys from [APPS].[AccountingPeriod]'
GO
ALTER TABLE [APPS].[AccountingPeriod] DROP CONSTRAINT [FK_AccountingPeriod_FiscalYear]
GO
PRINT N'Dropping constraints from [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] DROP CONSTRAINT [PK_FiscalCalendar]
GO
PRINT N'Dropping constraints from [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] DROP CONSTRAINT [DF_FiscalYear_Status]
GO
PRINT N'Dropping index [CX_FiscalCalendar] from [APPS].[FiscalYear]'
GO
DROP INDEX [CX_FiscalCalendar] ON [APPS].[FiscalYear]
GO
PRINT N'Rebuilding [APPS].[FiscalYear]'
GO
CREATE TABLE [APPS].[RG_Recovery_1_FiscalYear]
(
[Id] [uniqueidentifier] NOT NULL,
[SetOfBookId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Name] [nvarchar] (500) NOT NULL,
[StartDate] [datetime] NOT NULL,
[EndDate] [datetime] NOT NULL,
[Status] [int] NOT NULL CONSTRAINT [DF_FiscalYear_Status] DEFAULT ((0)),
[InventoryValuationMethod] [nvarchar] (50) NOT NULL
)
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_FiscalYear] ON
GO
INSERT INTO [APPS].[RG_Recovery_1_FiscalYear]([Id], [SetOfBookId], [CX], [Disable], [Name], [StartDate], [EndDate], [Status]) SELECT [Id], [SetOfBookId], [CX], [Disable], [Name], [StartDate], [EndDate], [Status] FROM [APPS].[FiscalYear]
GO
SET IDENTITY_INSERT [APPS].[RG_Recovery_1_FiscalYear] OFF
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[APPS].[FiscalYear]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[APPS].[RG_Recovery_1_FiscalYear]', RESEED, @idVal)
GO
DROP TABLE [APPS].[FiscalYear]
GO
EXEC sp_rename N'[APPS].[RG_Recovery_1_FiscalYear]', N'FiscalYear', N'OBJECT'
GO
PRINT N'Creating index [CX_FiscalCalendar] on [APPS].[FiscalYear]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_FiscalCalendar] ON [APPS].[FiscalYear] ([CX])
GO
PRINT N'Creating primary key [PK_FiscalCalendar] on [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] ADD CONSTRAINT [PK_FiscalCalendar] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[FiscalYear]'
GO
ALTER TABLE [APPS].[FiscalYear] ADD CONSTRAINT [FK_FiscalCalendar_SetofBook] FOREIGN KEY ([SetOfBookId]) REFERENCES [APPS].[SetOfBook] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[AccountingPeriod]'
GO
ALTER TABLE [APPS].[AccountingPeriod] ADD CONSTRAINT [FK_AccountingPeriod_FiscalYear] FOREIGN KEY ([FiscalYearId]) REFERENCES [APPS].[FiscalYear] ([Id])
GO
PRINT N'Creating extended properties'
GO
EXEC sp_addextendedproperty N'MS_Description', N'0 = CLOSED, 1 = OPEN, 2 = UNOPEN', 'SCHEMA', N'APPS', 'TABLE', N'FiscalYear', 'COLUMN', N'Status'
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\011_20190710-1438_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\011_20190710-1438_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('f094403a-3e11-4d8b-89d0-c680cf302395' AS UNIQUEIDENTIFIER), 'E381A41EA1AFFF98306FC499FA804ACDF1F714F533628F6D421853A452CBE697', 'Migrations\011_20190710-1438_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\011_20190710-1438_PC.sql", ID: {f094403a-3e11-4d8b-89d0-c680cf302395} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('74e2f742-91e2-4515-a390-725130d8e412' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\012_20190712-1027_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\012_20190712-1027_PC.sql", ID: {74e2f742-91e2-4515-a390-725130d8e412} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\012_20190712-1027_PC.sql" ----------------------------
GO
-- <Migration ID="74e2f742-91e2-4515-a390-725130d8e412" />
GO

PRINT N'Altering [APPS].[COATemplateDetail]'
GO
ALTER TABLE [APPS].[COATemplateDetail] ADD
[ParentId] [uniqueidentifier] NULL
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\012_20190712-1027_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\012_20190712-1027_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('74e2f742-91e2-4515-a390-725130d8e412' AS UNIQUEIDENTIFIER), '90732582EEEA8F0C7E75E177C952C12ABE37C6B3AB9F3AABEBF5EA89D9C655AD', 'Migrations\012_20190712-1027_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\012_20190712-1027_PC.sql", ID: {74e2f742-91e2-4515-a390-725130d8e412} *****
';

GO
SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;

GO
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO
IF EXISTS (SELECT 1 FROM [$(DatabaseName)].[dbo].[__MigrationLogCurrent] WHERE [migration_id] = CAST ('3ac0a57f-f205-47d8-8dfb-e38e09667530' AS UNIQUEIDENTIFIER))
  BEGIN
    IF @@TRANCOUNT > 0
      ROLLBACK;
    RAISERROR ('This script "Migrations\013_20190713-1004_PC.sql" has already been executed within the "$(DatabaseName)" database on this server. Halting deployment.', 16, 127);
    RETURN;
  END

GO
PRINT '

***** EXECUTING MIGRATION "Migrations\013_20190713-1004_PC.sql", ID: {3ac0a57f-f205-47d8-8dfb-e38e09667530} *****';

GO


-------------------------- BEGIN INCREMENTAL MIGRATION: "Migrations\013_20190713-1004_PC.sql" ----------------------------
GO
-- <Migration ID="3ac0a57f-f205-47d8-8dfb-e38e09667530" />
GO

PRINT N'Dropping foreign keys from [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] DROP CONSTRAINT [FK_User_Employee]
GO
PRINT N'Dropping foreign keys from [HR].[EmployeePosition]'
GO
ALTER TABLE [HR].[EmployeePosition] DROP CONSTRAINT [FK_EmployeeGroup_Employee]
GO
PRINT N'Dropping foreign keys from [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] DROP CONSTRAINT [FK_JobHistory_Employee]
GO
PRINT N'Dropping foreign keys from [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] DROP CONSTRAINT [FK_StockAdjustment_Employee]
GO
PRINT N'Dropping foreign keys from [dbo].[StockRequest]'
GO
ALTER TABLE [dbo].[StockRequest] DROP CONSTRAINT [FK_StockRequest_Employee]
GO
PRINT N'Dropping foreign keys from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_BusinessGroup]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobTitle]
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [FK_Employee_JobLevel]
GO
PRINT N'Dropping foreign keys from [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] DROP CONSTRAINT [FK_JobLevel_BusinessGroup]
GO
PRINT N'Dropping foreign keys from [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] DROP CONSTRAINT [FK_JobTitle_BusinessGroup]
GO
PRINT N'Dropping constraints from [AP].[Supplier]'
GO
ALTER TABLE [AP].[Supplier] DROP CONSTRAINT [PK_Supplier]
GO
PRINT N'Dropping constraints from [AR].[Customer]'
GO
ALTER TABLE [AR].[Customer] DROP CONSTRAINT [PK_Customer]
GO
PRINT N'Dropping constraints from [HR].[Employee]'
GO
ALTER TABLE [HR].[Employee] DROP CONSTRAINT [PK_Employee]
GO
PRINT N'Dropping constraints from [HR].[JobLevel]'
GO
ALTER TABLE [HR].[JobLevel] DROP CONSTRAINT [PK_JobLevel]
GO
PRINT N'Dropping constraints from [HR].[JobTitle]'
GO
ALTER TABLE [HR].[JobTitle] DROP CONSTRAINT [PK_JobTitle]
GO
PRINT N'Dropping index [CX_Supplier] from [AP].[Supplier]'
GO
DROP INDEX [CX_Supplier] ON [AP].[Supplier]
GO
PRINT N'Dropping index [CX_Employee] from [HR].[Employee]'
GO
DROP INDEX [CX_Employee] ON [HR].[Employee]
GO
PRINT N'Dropping index [CX_JobLevel] from [HR].[JobLevel]'
GO
DROP INDEX [CX_JobLevel] ON [HR].[JobLevel]
GO
PRINT N'Dropping index [CX_JobTitle] from [HR].[JobTitle]'
GO
DROP INDEX [CX_JobTitle] ON [HR].[JobTitle]
GO
PRINT N'Dropping [AR].[Customer]'
GO
DROP TABLE [AR].[Customer]
GO
PRINT N'Dropping [AP].[Supplier]'
GO
DROP TABLE [AP].[Supplier]
GO
PRINT N'Dropping [HR].[JobTitle]'
GO
DROP TABLE [HR].[JobTitle]
GO
PRINT N'Dropping [HR].[JobLevel]'
GO
DROP TABLE [HR].[JobLevel]
GO
PRINT N'Dropping [HR].[Employee]'
GO
DROP TABLE [HR].[Employee]
GO
PRINT N'Creating [APPS].[Employee]'
GO
CREATE TABLE [APPS].[Employee]
(
[Id] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Code] [nvarchar] (50) NOT NULL,
[DisplayName] [nvarchar] (200) NULL,
[PrimaryEmail] [nvarchar] (500) NULL,
[AlternativeEmail] [nvarchar] (500) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[JobTitleId] [uniqueidentifier] NOT NULL,
[JobLevelId] [uniqueidentifier] NOT NULL,
[JoinDate] [date] NOT NULL,
[EffectiveDate] [date] NULL,
[EndDate] [date] NULL,
[Status] [int] NOT NULL,
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_Employee] on [APPS].[Employee]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Employee] ON [APPS].[Employee] ([CX])
GO
PRINT N'Creating primary key [PK_Employee] on [APPS].[Employee]'
GO
ALTER TABLE [APPS].[Employee] ADD CONSTRAINT [PK_Employee] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[JobLevel]'
GO
CREATE TABLE [APPS].[JobLevel]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Level] [float] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_JobLevel] on [APPS].[JobLevel]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobLevel] ON [APPS].[JobLevel] ([CX])
GO
PRINT N'Creating primary key [PK_JobLevel] on [APPS].[JobLevel]'
GO
ALTER TABLE [APPS].[JobLevel] ADD CONSTRAINT [PK_JobLevel] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[JobTitle]'
GO
CREATE TABLE [APPS].[JobTitle]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[Code] [nvarchar] (50) NULL,
[Name] [nvarchar] (500) NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL
)
GO
PRINT N'Creating index [CX_JobTitle] on [APPS].[JobTitle]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_JobTitle] ON [APPS].[JobTitle] ([CX])
GO
PRINT N'Creating primary key [PK_JobTitle] on [APPS].[JobTitle]'
GO
ALTER TABLE [APPS].[JobTitle] ADD CONSTRAINT [PK_JobTitle] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Customer]'
GO
CREATE TABLE [APPS].[Customer]
(
[Id] [uniqueidentifier] NOT NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1),
[Disable] [bit] NOT NULL,
[Code] [nvarchar] (50) NOT NULL,
[Name] [nvarchar] (500) NOT NULL
)
GO
PRINT N'Creating primary key [PK_Customer] on [APPS].[Customer]'
GO
ALTER TABLE [APPS].[Customer] ADD CONSTRAINT [PK_Customer] PRIMARY KEY CLUSTERED  ([Id])
GO
PRINT N'Creating [APPS].[Supplier]'
GO
CREATE TABLE [APPS].[Supplier]
(
[Id] [uniqueidentifier] NOT NULL,
[TaxCode] [nvarchar] (50) NULL,
[Name] [nvarchar] (500) NULL,
[BusinessGroupId] [uniqueidentifier] NOT NULL,
[CX] [bigint] NOT NULL IDENTITY(1, 1)
)
GO
PRINT N'Creating index [CX_Supplier] on [APPS].[Supplier]'
GO
CREATE UNIQUE CLUSTERED INDEX [CX_Supplier] ON [APPS].[Supplier] ([CX])
GO
PRINT N'Creating primary key [PK_Supplier] on [APPS].[Supplier]'
GO
ALTER TABLE [APPS].[Supplier] ADD CONSTRAINT [PK_Supplier] PRIMARY KEY NONCLUSTERED  ([Id])
GO
PRINT N'Adding foreign keys to [APPSYS].[User]'
GO
ALTER TABLE [APPSYS].[User] ADD CONSTRAINT [FK_User_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [APPS].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[EmployeePosition]'
GO
ALTER TABLE [HR].[EmployeePosition] ADD CONSTRAINT [FK_EmployeeGroup_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [APPS].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [HR].[JobHistory]'
GO
ALTER TABLE [HR].[JobHistory] ADD CONSTRAINT [FK_JobHistory_Employee] FOREIGN KEY ([EmployeeId]) REFERENCES [APPS].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockAdjustment]'
GO
ALTER TABLE [dbo].[StockAdjustment] ADD CONSTRAINT [FK_StockAdjustment_Employee] FOREIGN KEY ([RequesterId]) REFERENCES [APPS].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [dbo].[StockRequest]'
GO
ALTER TABLE [dbo].[StockRequest] ADD CONSTRAINT [FK_StockRequest_Employee] FOREIGN KEY ([RequesterId]) REFERENCES [APPS].[Employee] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[Employee]'
GO
ALTER TABLE [APPS].[Employee] ADD CONSTRAINT [FK_Employee_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
ALTER TABLE [APPS].[Employee] ADD CONSTRAINT [FK_Employee_JobTitle] FOREIGN KEY ([JobTitleId]) REFERENCES [APPS].[JobTitle] ([Id])
GO
ALTER TABLE [APPS].[Employee] ADD CONSTRAINT [FK_Employee_JobLevel] FOREIGN KEY ([JobLevelId]) REFERENCES [APPS].[JobLevel] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[JobLevel]'
GO
ALTER TABLE [APPS].[JobLevel] ADD CONSTRAINT [FK_JobLevel_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO
PRINT N'Adding foreign keys to [APPS].[JobTitle]'
GO
ALTER TABLE [APPS].[JobTitle] ADD CONSTRAINT [FK_JobTitle_BusinessGroup] FOREIGN KEY ([BusinessGroupId]) REFERENCES [APPS].[BusinessGroup] ([Id])
GO

GO
--------------------------- END INCREMENTAL MIGRATION: "Migrations\013_20190713-1004_PC.sql" -----------------------------


GO
IF @@TRANCOUNT <> 1
  BEGIN
    DECLARE @ErrorMessage AS NVARCHAR (4000);
    SET @ErrorMessage = 'This migration "Migrations\013_20190713-1004_PC.sql" has left the transaction in an invalid or closed state (@@TRANCOUNT=' + CAST (@@TRANCOUNT AS NVARCHAR (10)) + '). Please ensure exactly 1 transaction is open by the end of the migration script.  Rolling-back any pending transactions.';
    RAISERROR (@ErrorMessage, 16, 127);
    RETURN;
  END

INSERT [$(DatabaseName)].[dbo].[__MigrationLog] ([migration_id], [script_checksum], [script_filename], [complete_dt], [applied_by], [deployed], [version], [package_version], [release_version])
VALUES                                         (CAST ('3ac0a57f-f205-47d8-8dfb-e38e09667530' AS UNIQUEIDENTIFIER), 'FC6CF5F1849E204677EA69DF8D5DFD78840FA37B8DEFEC8C96490B7841103C25', 'Migrations\013_20190713-1004_PC.sql', SYSDATETIME(), SYSTEM_USER, 1, NULL, '$(PackageVersion)', CASE '$(ReleaseVersion)' WHEN '' THEN NULL ELSE '$(ReleaseVersion)' END);

PRINT '***** FINISHED EXECUTING MIGRATION "Migrations\013_20190713-1004_PC.sql", ID: {3ac0a57f-f205-47d8-8dfb-e38e09667530} *****
';

GO
PRINT '# Committing transaction';

COMMIT TRANSACTION;

GO
PRINT '13 migration(s) deployed successfully';

GO







------------------------------------------------------------------------------------------------------------------------
------------------------------------------       POST-DEPLOYMENT SCRIPTS      ------------------------------------------
------------------------------------------------------------------------------------------------------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO

PRINT '----- executing post-deployment script "Post-Deployment\01_Finalize_Deployment.sql" -----';
GO

---------------------- BEGIN POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" ------------------------
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

GO
----------------------- END POST-DEPLOYMENT SCRIPT: "Post-Deployment\01_Finalize_Deployment.sql" -------------------------

SET IMPLICIT_TRANSACTIONS, NUMERIC_ROUNDABORT OFF;
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, NOCOUNT, QUOTED_IDENTIFIER ON;
IF DB_NAME() != '$(DatabaseName)'
  USE [$(DatabaseName)];

GO


IF SERVERPROPERTY('EngineEdition') != 5 AND HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
  DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
  SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
  SET @eventMessage = N'Redgate SQL Change Automation: { "deployment": { "description": "Redgate SQL Change Automation deployed $(ReleaseVersion) to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
  EXECUTE sys.xp_logevent 55000, @eventMessage
END
PRINT 'Deployment completed successfully.'
GO




SET NOEXEC OFF; -- Resume statement execution if an error occurred within the script pre-amble
